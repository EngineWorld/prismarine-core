#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rays.glsl"
#include "../include/STOmath.glsl"

LOCAL_SIZE_LAYOUT;

//layout ( std430, binding = 4 ) restrict buffer RayMortons {uint rayMorton[];};
//layout ( std430, binding = 5 ) restrict buffer BoundingBox {bbox inbound;};

void main()
{
    int it = int(gl_GlobalInvocationID.x);
    bool overflow = it >= RAY_BLOCK samplerUniform.rayCount;

    if (overflow) return;
    int t = activedBuf.indc[it];
    
    Ray ray = fetchRayDirect(t);
    int bounce = bitfieldExtract(ray.bitfield,  8, 4)-1;
    ray.final.xyz = max(vec3(0.0f), ray.final.xyz);
    ray.color.xyz = max(vec3(0.0f), ray.color.xyz);

    if (bounce < 0 || mlength(ray.color.xyz) < 0.0001f || overflow || ray.hitChain == -1) {
        //ray.actived = 0;
        ray.bitfield = bitfieldInsert(ray.bitfield, 0,  0, 1);
    }

    ray.bitfield = bitfieldInsert(ray.bitfield, bounce,  8, 4);
    ray.hitChain = -1; // reset chains

    if (!overflow) {
        storeRay(t, ray);
        addRayToList(ray); // add current rays to additions with newer
    }
}
