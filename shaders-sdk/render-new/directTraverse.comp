#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rays-new.glsl"
#include "../include/morton.glsl"
#include "../include/STOmath.glsl"
#include "../include/vertex.glsl"

layout ( std430, binding = 9 ) readonly buffer NodesBlock { HlbvhNode Nodes[]; };
layout ( std430, binding = 17 ) readonly buffer LeafBlock { HlbvhNode Leafs[]; };
layout ( std430, binding = 18 ) readonly buffer MortonIndicesBlock { int MortonIndices[]; };

struct SharedVarsData {
    int bakedStackCount;
    int chainID;
};

struct TResult {
    float dist;
    int triangleID;
    int materialID; // legacy
    float predist;
    vec4 uv;
    vec4 normal;
};

uint L = 0;
int deferredPtr = 0;
SharedVarsData sharedVarsData;

const int STACK_SIZE = 16;
const int groupSize = 1;
const int bakedFragments = 8;

shared int deferredStack[WORK_SIZE][STACK_SIZE];
shared vec4 bakedStack[WORK_SIZE][bakedFragments];

void reorderTriangles() {
    sharedVarsData.bakedStackCount = min(sharedVarsData.bakedStackCount, bakedFragments);

    for (int iround = 1; iround < sharedVarsData.bakedStackCount; iround++) {
        for (int index = 0; index < sharedVarsData.bakedStackCount - iround; index++) {
            bool lessIdx = floatBitsToInt(bakedStack[L][index].w) <= floatBitsToInt(bakedStack[L][index+1].w);
            bool deeper = lessF(bakedStack[L][index].z, bakedStack[L][index+1].z);
            if (lessIdx || deeper) {
                vec4 tmp = bakedStack[L][index];
                bakedStack[L][index] = bakedStack[L][index+1];
                bakedStack[L][index+1] = tmp;
            }
        }
    }

    // initial clean list
    int cleanBakedStackCount = 0;

    // select only unique triangle ID's
    for (int iround = 0; iround < bakedFragments; iround++) {
        if (iround >= sharedVarsData.bakedStackCount-1) break;
        if (floatBitsToInt(bakedStack[L][iround+1].w) != floatBitsToInt(bakedStack[L][iround].w)) {
            bakedStack[L][cleanBakedStackCount++] = bakedStack[L][iround];
        }
    }

    // copy last primitive
    if (sharedVarsData.bakedStackCount > 0 && cleanBakedStackCount < bakedFragments) {
        bakedStack[L][cleanBakedStackCount++] = bakedStack[L][sharedVarsData.bakedStackCount-1];
    }
    
    sharedVarsData.bakedStackCount = cleanBakedStackCount;
}



HitRework interpolateMeshData(inout HitRework res) {
    int tri = floatBitsToInt(res.uvt.w);

    if (greaterEqualF(res.uvt.z, 0.0f) && lessF(res.uvt.z, INFINITY) && tri != LONGEST) {
        vec3 trinorms[3];
        vec3 triverts[3];
        vec4 texcoords[3];
        vec4 colors[3];
        vec4 mods[3];

        for (int x=0;x<3;x++) {
            ivec2 mos = gatherMosaic(getUniformCoord(tri));
            triverts[x] = fetchMosaic(vertex_texture, mos, x).xyz;
            trinorms[x] = fetchMosaic(normal_texture, mos, x).xyz;
            texcoords[x] = fetchMosaic(texcoords_texture, mos, x);
            colors[x] = vec4(1.0f);
            mods[x] = fetchMosaic(modifiers_texture, mos, x);
        }

        vec3 deltaPos1 = triverts[1] - triverts[0];
        vec3 deltaPos2 = triverts[2] - triverts[0];
        vec2 uv = res.uvt.xy;
        vec3 nor = normalize(cross(deltaPos1, deltaPos2));
        vec3 normal = fma(trinorms[0], vec3(1.0f - uv.x - uv.y), fma(trinorms[1], vec3(uv.x), trinorms[2] * vec3(uv.y)));
        normal = lessF(length(normal), 0.f) ? nor : normalize(normal);
        normal = normal * sign(dot(normal, nor));

        bool delta = all(equal(texcoords[0].xy, texcoords[1].xy)) && all(equal(texcoords[0].xy, texcoords[2].xy));
        vec2 deltaUV1 = delta ? vec2(1.0f, 0.0f) : texcoords[1].xy - texcoords[0].xy;
        vec2 deltaUV2 = delta ? vec2(0.0f, 1.0f) : texcoords[2].xy - texcoords[0].xy;

        float f = 1.0f / fma(deltaUV1.x, deltaUV2.y, -deltaUV1.y * deltaUV2.x);
        vec3 tan = fma(deltaPos1, vec3(deltaUV2.y), -deltaPos2 * deltaUV1.y) * f;

        res.normalHeight = vec4(normal, 0.0f);
        res.tangent = vec4(normalize(tan - normal * sign(dot(tan, nor))), 0.0f);
        res.texcoord = fma(texcoords[0], vec4(1.0f - uv.x - uv.y), fma(texcoords[1], vec4(uv.x), texcoords[2] * vec4(uv.y)));
        res.albedo = fma(colors[0], vec4(1.0f - uv.x - uv.y), fma(colors[1], vec4(uv.x), colors[2] * vec4(uv.y)));
        res.materialID = mats[tri];
    }

    return res;
}

int prevHt = -1;

void includeChain(in int chainID, in vec4 intersection){
    int hid = atomicIncHt(true);
    HitRework hitp = hitBuf.nodes[hid];
    hitp.uvt = intersection;

    hitp.next = -1;
    hitBuf.nodes[hid] = interpolateMeshData(hitp);
    if (prevHt == -1) {
        sharedVarsData.chainID = hid;
    } else {
        hitBuf.nodes[prevHt].next = hid;
    }
    prevHt = hid;
}

TResult choiceBaked(inout TResult res, in vec3 orig, in vec3 dir, in int tpi) {
    reorderTriangles();

    for (int i=0;i<sharedVarsData.bakedStackCount;i++) {
        includeChain(i, bakedStack[L][i]);
    }

    return res;
}

TResult testIntersection(inout TResult res, in vec3 orig, in vec3 dir, in int tri, in bool isValid) {
    bool validTriangle = 
        isValid && 
        tri >= 0 && 
        tri != LONGEST && 
        tri != res.triangleID;

    if (anyInvocation(validTriangle)) {
        vec2 uv = vec2(0.0f);
        float _d = intersectTriangle(orig, dir, tri, uv, validTriangle);
        bool near = validTriangle && lessF(_d, INFINITY) && lessEqualF(_d, res.predist) && greaterEqualF(_d, 0.0f);

        if (near) {
            if (!equalF(_d, res.predist)) { // if distance not equal, reset baked storage counting
                sharedVarsData.bakedStackCount = 0;
            }
            res.predist = _d;
            bakedStack[L][add(sharedVarsData.bakedStackCount, 1)] = vec4(uv, _d, intBitsToFloat(tri));
        }
    }

    return res;
}

vec3 projectVoxels(in vec3 orig) {
    return mult4(vec4(orig, 1.0f), GEOMETRY_BLOCK geometryUniform.transform).xyz;
}

vec3 unprojectVoxels(in vec3 orig) {
    return mult4(vec4(orig, 1.0f), GEOMETRY_BLOCK geometryUniform.transformInv).xyz;
}

#define SGN(v) v = idx

void includeLeaf(in vec3 origin, in vec3 direct, in bool validBox, in HlbvhNode node, in vec3 boxHit, inout TResult lastRes){
    bool isLeaf = validBox;
    if (isLeaf) {
        for (int ls=0;ls<groupSize;ls+=1) {
            bool overtaken = ls > node.pdata.y-node.pdata.w || !isLeaf;
            if (anyInvocation(!overtaken)) {
                int triIdx = overtaken ? LONGEST : Leafs[MortonIndices[node.pdata.w + ls]].pdata.w;
                testIntersection(lastRes, origin.xyz, direct.xyz, triIdx, isLeaf && !overtaken);
            }
        }
    }
}

TResult traverse(in vec3 origin, in vec3 direct, in bool valid) {
    TResult lastRes;
    lastRes.dist = prevHt != -1 ? hitBuf.nodes[prevHt].uvt.z : INFINITY;
    lastRes.predist = prevHt != -1 ? hitBuf.nodes[prevHt].uvt.z : INFINITY;
    lastRes.triangleID = LONGEST;
    lastRes.materialID = LONGEST;
    lastRes.normal = vec4(0.f);

    // deferred stack
    deferredPtr = 0;
    deferredStack[L][0] = -1;
    sharedVarsData.chainID = -1;
    sharedVarsData.bakedStackCount = 0;
    for (int i=0;i<bakedFragments;i++) {bakedStack[L][i] = vec4(vec2(0.0f), INFINITY, LONGEST);}

    // something fix
    direct = normalize(direct);

    // test constants
    vec3 torig = projectVoxels(origin);
    //vec3 tdirproj = mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(direct, 1.0)).xyz;
    vec3 tdirproj = mult4(vec4(direct, 0.0), GEOMETRY_BLOCK geometryUniform.transform).xyz;
    float dirlen = length(tdirproj) / max(length(direct), 0.000001f);
    float dirlenInv = 1.f / max(dirlen, 0.000001f);
    vec3 dirproj = normalize(tdirproj);

    // test with root node
    float near = INFINITY, far = INFINITY;
    float d = intersectCubeSingle(torig, dirproj, vec4(vec3(0.f), 1.0f), vec4(vec3(1.f), 1.0f), near, far);
    //lastRes.predist = min(lastRes.predist, far * dirlenInv);

    // init state
    int idx = 0;
    bool validBox = valid && lessF(d, INFINITY) && lessF(d * dirlenInv, INFINITY) && greaterEqualF(d, 0.0f);
    for (int i=0;i<16384;i++) {
        if (allInvocations(!validBox)) break;
        HlbvhNode node = Nodes[idx];

        // choice near box
        bool skip = false;
        bool notLeaf = node.pdata.x != node.pdata.y && validBox;
        if (anyInvocation(notLeaf)) {
            HlbvhNode lnode = Nodes[node.pdata.x];
            HlbvhNode rnode = Nodes[node.pdata.y];

            vec2 inf2 = vec2(INFINITY), nears = inf2, fars = inf2;
            vec2 hits = vec2(
                intersectCubeSingle(torig, dirproj, lnode.box.mn, lnode.box.mx, nears.x, fars.x),
                intersectCubeSingle(torig, dirproj, rnode.box.mn, rnode.box.mx, nears.y, fars.y)
            );

            int overlapsGeneral = (notLeaf ? 3 : 0) & cB2(lessThanEqual(hits, vec2(INFINITY-PZERO))) & cB2(greaterThan(hits, -vec2(PZERO))) & cB2(lessThanEqual(nears, vec2(lastRes.predist+PZERO) * dirlen));
            int overlaps = overlapsGeneral & cB2(bvec2(lnode.pdata.x != lnode.pdata.y, rnode.pdata.x != rnode.pdata.y));

            bool anyOverlap = anyB(overlaps);
            if (anyInvocation(anyOverlap)) {
                bvec2 overlapsBool = cI2(overlaps);
                bool leftOrder = allB2(overlaps) ? lessEqualF(nears.x, nears.y) : overlapsBool.x;
                ivec2 leftright = mix(ivec2(-1), node.pdata.xy, overlapsBool);
                leftright = leftOrder ? leftright : leftright.yx;
                if (anyOverlap && leftright.x != -1) {
                    if (deferredPtr < STACK_SIZE && leftright.y != -1 && leftright.x != leftright.y) {
                        deferredStack[L][deferredPtr++] = leftright.y;
                    }
                    idx = leftright.x;
                    skip = true;
                }
            }

            // because traverse stack is limited, we does not including leafs to this stack
            overlapsGeneral &= cB2(bvec2(lnode.pdata.x == lnode.pdata.y, rnode.pdata.x == rnode.pdata.y)); // is leafs
            if (anyInvocation(anyB(overlapsGeneral))) {
                bvec2 overlaps = cI2(overlapsGeneral);
                bool leafOrder = allB2(overlapsGeneral) ? lessEqualF(nears.x, nears.y) : overlaps.x;
                overlaps = leafOrder ? overlaps : overlaps.yx;
                nears = leafOrder ? nears : nears.yx;
                hits = leafOrder ? hits : hits.yx;
                includeLeaf(origin, direct, validBox && overlaps.x && lessEqualF(nears.x, lastRes.predist), leafOrder ? lnode : rnode, dirproj * hits.x + torig, lastRes);
                includeLeaf(origin, direct, validBox && overlaps.y && lessEqualF(nears.y, lastRes.predist), leafOrder ? rnode : lnode, dirproj * hits.y + torig, lastRes);
            }
        }

        // go to parent 
        if (!skip) {
            int ptr = --deferredPtr;
            bool valid = ptr >= 0; idx = valid ? atomicExchange(deferredStack[L][ptr], -1) : -1;
            validBox = validBox && valid && idx >= 0;
        };
    }

    lastRes.triangleID = LONGEST;
    choiceBaked(lastRes, origin.xyz, direct.xyz, 0);
    return lastRes;
}

LOCAL_SIZE_LAYOUT;

void main() {
    L = gl_LocalInvocationID.x;

    int it = int(gl_GlobalInvocationID.x);
    bool overflow = it >= RAY_BLOCK samplerUniform.rayCount;
    if (allInvocations(overflow)) return;

    int t = activedBuf.indc[it];
    RayRework ray = rayBuf.nodes[t];
    overflow = RayActived(ray) == 0 || overflow;
    if (allInvocations(overflow)) return;

    prevHt = ray.hit;
    traverse(ray.origin.xyz, ray.direct.xyz, !overflow);
    ray.hit = sharedVarsData.chainID;
    rayBuf.nodes[t] = ray; // just store
}
