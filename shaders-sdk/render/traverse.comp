#version 460 core

#define ORDERING_NOT_REQUIRED

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rays.glsl"
#include "../include/morton.glsl"
#include "../include/STOmath.glsl"

layout ( std430, binding = 9 ) readonly buffer NodesBlock { HlbvhNode Nodes[]; };
layout ( std430, binding = 17 ) restrict buffer CWFoundGroups { GroupFoundResult FoundGroupsChains[]; };

const vec3 padding = vec3(0.00001f);
const int STACK_SIZE = 16;
shared int deferredStack[WORK_SIZE][STACK_SIZE];

struct SharedVarsData {
    vec4 bakedRangeIntersection;
    int bakedRange;
    int bakedStackCount;
    uint L;
};

struct TResult {
    float dist;
    int triangleID;
    int materialID; // legacy
    float predist;
    vec4 uv;
};





vec3 projectVoxels(in vec3 orig) {
    vec4 nps = mult4(vec4(orig, 1.0f), GEOMETRY_BLOCK geometryUniform.transform);
    return nps.xyz / nps.w;
}

vec3 unprojectVoxels(in vec3 orig) {
    vec4 nps = mult4(vec4(orig, 1.0f), GEOMETRY_BLOCK geometryUniform.transformInv);
    return nps.xyz / nps.w;
}

float intersectCubeSingle(in vec3 origin, in vec3 ray, in vec4 cubeMin, in vec4 cubeMax, inout float near, inout float far) {
    vec3 dr = 1.0f / ray;
    vec3 tMin = (cubeMin.xyz - origin) * dr;
    vec3 tMax = (cubeMax.xyz - origin) * dr;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
#ifdef ENABLE_AMD_INSTRUCTION_SET
    float tNear = max3(t1.x, t1.y, t1.z);
    float tFar  = min3(t2.x, t2.y, t2.z);
#else
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);
#endif
    bool isCube = tFar >= tNear && greaterEqualF(tFar, 0.0f);
    near = isCube ? tNear : INFINITY;
    far  = isCube ? tFar  : INFINITY;
    return isCube ? (lessF(tNear, 0.0f) ? tFar : tNear) : INFINITY;
}


void intersectCubeApart(in vec3 origin, in vec3 ray, in vec4 cubeMin, in vec4 cubeMax, inout float near, inout float far) {
    vec3 dr = 1.0f / ray;
    vec3 tMin = (cubeMin.xyz - origin) * dr;
    vec3 tMax = (cubeMax.xyz - origin) * dr;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
#ifdef ENABLE_AMD_INSTRUCTION_SET
    near = max3(t1.x, t1.y, t1.z);
    far  = min3(t2.x, t2.y, t2.z);
#else
    near = max(max(t1.x, t1.y), t1.z);
    far  = min(min(t2.x, t2.y), t2.z);
#endif
}

TResult traverse(in float distn, in vec3 origin, in vec3 direct, in Hit hit) {
    const uint L = gl_LocalInvocationID.x;

    int idx = 0, deferredPtr = 0;
    bool validBox = false;
    bool skip = false;

    TResult lastRes;
    lastRes.dist = hit.dist + 0.0001f;
    lastRes.predist = hit.dist + 0.0001f;
    lastRes.triangleID = hit.triangleID;//LONGEST;
    lastRes.materialID = LONGEST;

    SharedVarsData sharedVarsData;
    sharedVarsData.bakedRange = LONGEST;
    sharedVarsData.bakedStackCount = 0;
    sharedVarsData.L = L;

    deferredStack[L][0] = -1;

    // test constants
    int bakedStep = int(floor(1.f + hit.vmods.w));
    vec3 torig = projectVoxels(origin);
    vec3 tdirproj = mult4(vec4(direct, 0.0), GEOMETRY_BLOCK geometryUniform.transform).xyz;
    float dirlen = 1.0f / length(tdirproj);
    vec3 dirproj = normalize(tdirproj);

    // test with root node
    float near = INFINITY, far = INFINITY;
    float d = intersectCubeSingle(torig, dirproj, vec4(vec3(0.0f), 1.0f), vec4(1.0f), near, far);
    lastRes.predist = far * dirlen;

    // init state
    {
        validBox = lessF(d, INFINITY) && greaterEqualF(d, 0.0f);
    }

    for(int i=0;i<8192;i++) {
        if (allInvocations(!validBox)) break;
        HlbvhNode node = Nodes[idx];

        // is leaf
        bool isLeaf = node.pdata.x == node.pdata.y && validBox;
        if (anyInvocation(isLeaf) && isLeaf) {
            int idx = atomicIncFt(true);
            float near = INFINITY, far = INFINITY;
            float d = intersectCubeSingle(torig, dirproj, node.box.mn, node.box.mx, near, far);
            if (lessF(d, INFINITY) && greaterEqualF(d, 0.f)) {
                FoundGroupsChains[idx] = GroupFoundResult(exchange(lastRes.triangleID, idx), near * dirlen, ivec2(node.pdata.w));
            }
            //testIntersection(sharedVarsData, lastRes, origin, direct, node.pdata.w, isLeaf);
        }

        bool notLeaf = node.pdata.x != node.pdata.y && validBox;
        if (anyInvocation(notLeaf)) {
            HlbvhNode lnode = Nodes[node.pdata.x];
            HlbvhNode rnode = Nodes[node.pdata.y];

            vec2 inf2 = vec2(INFINITY);
            vec2 nearsLR = inf2;
            vec2 farsLR = inf2;
            intersectCubeApart(torig, dirproj, lnode.box.mn, lnode.box.mx, nearsLR.x, farsLR.x);
            intersectCubeApart(torig, dirproj, rnode.box.mn, rnode.box.mx, nearsLR.y, farsLR.y);

            bvec2 isCube = and2(greaterThanEqual(farsLR, nearsLR), greaterThanEqual(farsLR, vec2(0.0f)));
            vec2 nears = mix(inf2, nearsLR, isCube);
            vec2  fars = mix(inf2, farsLR, isCube);
            vec2  hits = mix(nears, fars, lessThan(nears, vec2(0.0f)));

            bvec2 overlaps = 
                and2(bvec2(notLeaf), 
                and2(lessThanEqual(hits, vec2(INFINITY-PZERO)),
                and2(greaterThan(hits, -vec2(PZERO)),
                greaterThan(vec2(lastRes.predist), nears * dirlen - PZERO))));
            
            bool anyOverlap = any(overlaps);
            if (anyInvocation(anyOverlap)) {
                bool leftOrder = all(overlaps) ? lessEqualF(hits.x, hits.y) : overlaps.x;

                ivec2 leftright = mix(ivec2(-1), node.pdata.xy, overlaps);
                leftright = leftOrder ? leftright : leftright.yx;

                if (anyOverlap) {
                    if (deferredPtr < STACK_SIZE && leftright.y != -1) {
                        deferredStack[L][deferredPtr++] = leftright.y;
                    }
                    idx = leftright.x;
                    skip = true;
                }
            }
        }

        if (!skip) {
            int ptr = --deferredPtr;
            bool valid = ptr >= 0;
            idx = valid ? exchange(deferredStack[L][ptr], -1) : -1;
            validBox = validBox && valid && idx >= 0;
        } skip = false;
    }

    //choiceBaked(sharedVarsData, lastRes, origin, direct, bakedStep);
    return lastRes;
}

LOCAL_SIZE_LAYOUT;

void main() {
    const int it = int(gl_GlobalInvocationID.x);
    const bool overflow = it >= RAY_BLOCK samplerUniform.rayCount;
    if (allInvocations(overflow)) return;

    const int t = activedBuf.indc[it];
    Ray ray = fetchRayDirect(t);
    if (allInvocations(ray.actived < 1 || overflow)) return;

    Hit hit = fetchHitDirect(t);
    TResult res = traverse(hit.dist, ray.origin.xyz, ray.direct.xyz, hit);

    hit.triangleID = res.triangleID;
    if (!overflow) storeHit(t, hit);

    if (hit.triangleID != -1 && !overflow) {
        collBuf.indc[atomicIncGt(true)] = t;
    }
}
