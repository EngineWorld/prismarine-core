#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/STOmath.glsl"
#include "./includes.glsl"

#define LEAFIDX(i) (Range[0] + i)
#define NODEIDX(i) (clamp(i, 1, Range[0]-1))

layout ( local_size_x = 1024 ) in;

int nlz (in uint x) {
    return 31-findMSB(x);
}

int nlz (in int x) {
    return 31-findMSB(uint(x));
}

// TODO - two lane SIMD threading support
int findSplit( int first, int last, uint SIMDThread)
{
    uint firstCode = Mortoncodes[first];
    uint lastCode = Mortoncodes[last];
    if (firstCode == lastCode) {
        return (first + last) >> 1;
    }

    int commonPrefix = nlz(firstCode ^ lastCode);
    int split = first;
    int step = last - first;
    for (int i=0;i<8192;i++) {
        step = (step + 1) >> 1;
        int newSplit = split + step;
        if (newSplit < last) {
             uint splitCode = Mortoncodes[newSplit];
             int splitPrefix = nlz(firstCode ^ splitCode);
            if (splitPrefix > commonPrefix) {
                split = newSplit;
            }
        }
        if (step <= 1) break; 
    }

    return clamp(split, 0, Range[0]-2);
}

shared int lRange[2];
shared int lCounter;

initAtomicIncFunction(lCounter, lCounterInc, int);

void main() {
    if (gl_WorkGroupID.x > 0) return; // not supported
    const uint threadID = uint(gl_LocalInvocationID.x);

    if (threadID == 0) {
        lCounter = 1;
        lRange[0] = 0;
        lRange[1] = 1;

        HlbvhNode node = Nodes[threadID];
        node.box.mn = (0.0f).xxxx;
        node.box.mx = (0.0f).xxxx;
        node.pdata.xy = ivec2(0, Range[0]-1);
        node.pdata.zw = (-1).xx;
        
        Nodes[threadID] = node;
        Flags[threadID] = 0;
    }

    int cntstdr = 0;
    for (int h=0;h<256;h++) { // every level of BVH
        // begin work on splitting
        barrier(); memoryBarrier();
        if (lRange[1] <= lRange[0]) break; // no work, break

        uint workSize = min((lRange[1] <= lRange[0]) ? 0 : (((lRange[1] - lRange[0]) - 1) / (gl_WorkGroupSize.x / 2) + 1), 8192);
        for (int i=0;i<workSize;i++) {
            uint prID = lRange[0] + ((gl_WorkGroupSize.x / 2) * i + (threadID / 2));
            uint chID = threadID % 2;

            if (prID < lRange[1]) {
                HlbvhNode parentNode = Nodes[prID];
                if (parentNode.pdata.x != parentNode.pdata.y) { // TODO - collection non-children nodes to active list (for getting best performance on between WARP lanes)

                    // find split
                    int split = readLane(findSplit(parentNode.pdata.x, parentNode.pdata.y, chID), int((gl_SubGroupInvocationARB >> 1) << 1));
                    int hid = lCounterInc(true);

                    // init child node
                    HlbvhNode childNode = Nodes[hid];
                    childNode.box.mn = (0.0f).xxxx;
                    childNode.box.mx = (0.0f).xxxx;
                    childNode.pdata.zw = ivec2(prID, -1);

                    // differentiation between left and right node
                    childNode.pdata.xy = chID == 0 ? ivec2(parentNode.pdata.x, split+0) : ivec2(split+1, parentNode.pdata.y);

                    // is leaf?
                    if (childNode.pdata.x == childNode.pdata.y) {
                        uint leafID = MortoncodesIndices[childNode.pdata.x];

                        // make leafs
                        Leaf ourLeaf = Leafs[leafID];
                        ourLeaf.pdata.z = int(hid);
                        Leafs[leafID] = ourLeaf;

                        // load leaf data
                        childNode.box.mn = ourLeaf.box.mn;
                        childNode.box.mx = ourLeaf.box.mx;
                        childNode.pdata.xy = ourLeaf.pdata.xy;
                        childNode.pdata.w  = ourLeaf.pdata.w;
                    }

                    Flags[hid] = 0;
                    Nodes[hid] = childNode;

                    // if SIMD thread is left, use left lane of parent node, else right lane
                    if (chID == 0) {
                        atomicExchange(Nodes[prID].pdata.x, hid);
                    } else {
                        atomicExchange(Nodes[prID].pdata.y, hid);
                    }
                }
            } else {
                break;
            }
        }

        // synchronize, and make next work view
        barrier(); memoryBarrier();
        if (threadID == 0) {
            lRange[0] = lRange[1];
            lRange[1] = lCounter;
        }
    }





    /*
    int cntstdr = 0;
    for (int h=0;h<256;h++) { // every level of BVH
        // begin work on splitting
        barrier(); memoryBarrier();
        if (lRange[1] <= lRange[0]) break; // no work, break

        const uint workSize = min((lRange[1] <= lRange[0]) ? 0 : (((lRange[1] - lRange[0]) - 1) / gl_WorkGroupSize.x + 1), 8192);
        for (int i=0;i<workSize;i++) {
            const uint prID = lRange[0] + (gl_WorkGroupSize.x * i + threadID);

            if (prID < lRange[1]) {
                HlbvhNode parentNode = Nodes[prID];

                if (parentNode.pdata.x != parentNode.pdata.y) {
                    // find split
                    const int split = findSplit(parentNode.pdata.x, parentNode.pdata.y);

                    // add to list
                    const int hid = atomicAdd(lCounter, cntstdr = 2); cntstdr = 0;
                    const int lid = hid+0, rid = hid+1;

                    HlbvhNode leftNode = Nodes[lid];
                    leftNode.box.mn = (0.0f).xxxx;
                    leftNode.box.mx = (0.0f).xxxx;
                    leftNode.pdata.xy = ivec2(parentNode.pdata.x, split+0);
                    leftNode.pdata.zw = ivec2(prID, -1);
                    
                    HlbvhNode rightNode = Nodes[rid];
                    rightNode.box.mn = (0.0f).xxxx;
                    rightNode.box.mx = (0.0f).xxxx;
                    rightNode.pdata.xy = ivec2(split+1, parentNode.pdata.y);
                    rightNode.pdata.zw = ivec2(prID, -1);
                    
                    // left node
                    Nodes[lid] = leftNode;
                    Flags[lid] = 0;

                    // right node
                    Nodes[rid] = rightNode;
                    Flags[rid] = 0;

                    // connect with childrens
                    parentNode.pdata.xy = ivec2(lid, rid);
                    Nodes[prID] = parentNode;
                } else {
                    uint leafID = MortoncodesIndices[parentNode.pdata.x];
                    
                    // make leafs
                    Leaf ourLeaf = Leafs[leafID];
                    ourLeaf.pdata.z = int(prID);
                    Leafs[leafID] = ourLeaf;

                    // load leaf data
                    int parentTmp = parentNode.pdata.z;
                    parentNode.box.mn = ourLeaf.box.mn;
                    parentNode.box.mx = ourLeaf.box.mx;
                    parentNode.pdata = ourLeaf.pdata;
                    parentNode.pdata.z = parentTmp;
                    Nodes[prID] = parentNode;
                }
            } else {
                break;
            }
        }

        // synchronize, and make next work view
        barrier(); memoryBarrier();
        if (threadID == 0) {
            lRange[0] = lRange[1];
            lRange[1] = lCounter;
        }
    }*/
}
