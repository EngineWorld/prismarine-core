#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/STOmath.glsl"
#include "./includes.glsl"

#define LEAFIDX(i) (Range[0] + i)
#define NODEIDX(i) (clamp(i, 1, Range[0]-1))
























layout ( local_size_x = 1024 ) in;

int nlz (in uint64_t x) {
    //return 63-findMSB(x);
    int msbFar = findMSB(uint(x >> 32));
    int msbFinal = (msbFar == -1) ? findMSB(uint(x)) : msbFar + 32;
    return 63-msbFinal;
}

int nlz (in uint x) {
    return 31-findMSB(x);
}

int nlz (in int x) {
    return 31-findMSB(uint(x));
}

// TODO - two lane SIMD threading support
int findSplit( int first, int last, uint SIMDThread)
{
    MORTONTYPE firstCode = Mortoncodes[first];
    MORTONTYPE lastCode = Mortoncodes[last];
    if (firstCode == lastCode) {
        return (first + last) >> 1;
    }

    int commonPrefix = nlz(firstCode ^ lastCode);
    int split = first;
    int step = last - first;
    for (int i=0;i<8192;i++) {
        step = (step + 1) >> 1;
        int newSplit = split + step;
        if (newSplit < last) {
            MORTONTYPE splitCode = Mortoncodes[newSplit];
            int splitPrefix = nlz(firstCode ^ splitCode);
            if (splitPrefix > commonPrefix) {
                split = newSplit;
            }
        }
        if (step <= 1) break; 
    }

    return clamp(split, 0, Range[0]-2);
}

shared int lCounter;
shared int aCounter;
shared int aRange[2];

initAtomicIncFunction(lCounter, lCounterInc, int);
initAtomicIncFunction(aCounter, aCounterInc, int);

void main() {
    if (gl_WorkGroupID.x > 0) return; // not supported
    const uint threadID = uint(gl_LocalInvocationID.x);

    if (threadID == 0) {
        lCounter = 1;
        aRange[0] = 0, aRange[1] = 1, aCounter = 1;
        atomicExchange(Actives[aRange[0]], int(threadID));

        HlbvhNode node = Nodes[threadID];
        node.box.mn = (0.0f).xxxx;
        node.box.mx = (0.0f).xxxx;
        node.pdata.xy = ivec2(0, Range[0]-1);
        node.pdata.zw = (-1).xx;
        
        Nodes[threadID] = node;
        Flags[threadID] = 0;
    }

    int cntstdr = 0;
    for (int h=0;h<256;h++) { // every level of BVH
        // begin work on splitting
        barrier(); memoryBarrier(); groupMemoryBarrier();
        if (aRange[1] <= aRange[0]) break; // no work, break

        uint workSize = min((aRange[1] <= aRange[0]) ? 0 : (((aRange[1] - aRange[0]) - 1) / (int(gl_WorkGroupSize.x) / 2) + 1), 8192);
        for (int i=0;i<workSize;i++) {
            int trID = aRange[0] + ((int(gl_WorkGroupSize.x) / 2) * i + (int(threadID) / 2));

            if (trID < aRange[1]) {
                int chID = int(threadID) % 2;
                int wsID = int((int(gl_SubGroupInvocationARB) >> 1) << 1);
                int prID = readLane(chID == 0 ? atomicExchange(Actives[trID], -1) : -1, wsID);
                HlbvhNode parentNode = Nodes[prID];


                if (parentNode.pdata.x != parentNode.pdata.y && prID != -1) {
                    // find split
                    int split = readLane(findSplit(parentNode.pdata.x, parentNode.pdata.y, chID), wsID);
                    int hid = lCounterInc(true);

                    // init child node
                    HlbvhNode childNode = Nodes[hid];
                    childNode.box.mn = (0.0f).xxxx;
                    childNode.box.mx = (0.0f).xxxx;
                    childNode.pdata.zw = ivec2(prID, -1);

                    // differentiation between left and right node
                    childNode.pdata.xy = chID == 0 ? ivec2(parentNode.pdata.x, split+0) : ivec2(split+1, parentNode.pdata.y);

                    // is leaf?
                    //if (childNode.pdata.x == childNode.pdata.y) {
                    bool isLeaf = (childNode.pdata.y - childNode.pdata.x) < 1;
                    if (isLeaf) {

                        // load leaf data
                        childNode.box.mn = ( 100000.f).xxxx;
                        childNode.box.mx = (-100000.f).xxxx;
                        
                        // ranged child
                        for (int l=childNode.pdata.x;l<=childNode.pdata.y;l++) {
                            uint leafID = MortoncodesIndices[l];

                            // make leafs links
                            atomicExchange(Leafs[leafID].pdata.z, int(hid));

                            // fit bounding box
                            bbox lbound = Leafs[leafID].box;
                            bbox bound = childNode.box;
                            childNode.box.mn = min(bound.mn, lbound.mn);
                            childNode.box.mx = max(bound.mx, lbound.mx);
                        }

                        // reform range
                        ivec2 range = childNode.pdata.xy;
                        childNode.pdata.xy = range.yy; // leaf end (for identify that is leaf)
                        childNode.pdata.w  = range.x;  // leaf index (except morton-code) is primitive

                    } else { // add to next works
                        atomicExchange(Actives[aCounterInc(true)], hid);
                    }

                    Flags[hid] = 0;
                    Nodes[hid] = childNode;

                    // if SIMD thread is left, use left lane of parent node, else right lane
                    if (chID == 0) {
                        atomicExchange(Nodes[prID].pdata.x, hid);
                    } else {
                        atomicExchange(Nodes[prID].pdata.y, hid);
                    }
                }
            }
            
            if (allInvocations(trID >= aRange[1])) {
                break;
            }
        }

        // synchronize, and make next work view
        barrier(); memoryBarrier(); groupMemoryBarrier();
        if (threadID == 0) {
            aRange[0] = aRange[1];
            aRange[1] = aCounter;
        }
    }
}
