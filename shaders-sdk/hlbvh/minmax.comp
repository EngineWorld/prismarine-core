#version 450

#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shading_language_420pack : require

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/vertex.glsl"

layout ( std430, binding = 5 ) buffer MinmaxOutputSSBO {vec4 minmax[];};
layout ( local_size_x = 512 ) in;

shared bbox sdata[256];

bbox getMinMaxPrimitive(in uint idx){
    idx = clamp(idx, 0u, uint(GEOMETRY_BLOCK geometryUniform.triangleCount-1));
    vec4 triverts[3];
#pragma optionNV (unroll all)
    for (int x=0;x<3;x++) {
        const uint j = idx*3 + x;
        const vec4 nps = GEOMETRY_BLOCK octreeUniform.project * vec4(toVec3(verts[j].vertex), 1.0f);
        triverts[x] = nps / nps.w;
    }
    return bbox(
        min(triverts[0], min(triverts[1], triverts[2])), 
        max(triverts[0], max(triverts[1], triverts[2]))
    );
}

bbox bboxunion(in bbox b1, in bbox b2) {
    bbox res = b1;
    res.mn = min(res.mn, b2.mn);
    res.mx = max(res.mx, b2.mx);
    return res;
}

void main() {
    const uint tid = gl_LocalInvocationID.x;
    const uint gridSize = (gl_WorkGroupSize.x*2) * gl_NumWorkGroups.x;
    uint i = gl_WorkGroupID.x * (gl_WorkGroupSize.x*2) + tid;

    sdata[tid].mn = vec4( 100000.f);
    sdata[tid].mx = vec4(-100000.f);

    while (i < GEOMETRY_BLOCK geometryUniform.triangleCount) {
        sdata[tid] = bboxunion(sdata[tid], bboxunion(getMinMaxPrimitive(i), getMinMaxPrimitive(i + gl_WorkGroupSize.x)));
        i += gridSize;
    }
    barrier();

    if (gl_WorkGroupSize.x >= 512) {
        if (tid < 256) { sdata[tid] = bboxunion(sdata[tid], sdata[tid + 256]); } barrier();
    }

    if (gl_WorkGroupSize.x >= 256) {
        if (tid < 128) { sdata[tid] = bboxunion(sdata[tid], sdata[tid + 128]); } barrier(); 
    }

    if (gl_WorkGroupSize.x >= 128) {
        if (tid < 128) { sdata[tid] = bboxunion(sdata[tid], sdata[tid + 64]); } barrier();
    }

    if (tid < 32) {
        if (gl_WorkGroupSize.x >= 64) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 32]);
        if (gl_WorkGroupSize.x >= 32) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 16]);
        if (gl_WorkGroupSize.x >= 16) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 8]);
        if (gl_WorkGroupSize.x >= 8) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 4]);
        if (gl_WorkGroupSize.x >= 4) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 2]);
        if (gl_WorkGroupSize.x >= 2) sdata[tid] = bboxunion(sdata[tid], sdata[tid + 1]);
    }

    if (tid == 0) {
        minmax[gl_WorkGroupID.x*2 + 0] = sdata[0].mn; 
        minmax[gl_WorkGroupID.x*2 + 1] = sdata[0].mx; 
    }
}
