#version 450

#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_ARB_shader_ballot : require

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/vertex.glsl"

layout ( std430, binding = 5 ) buffer MinmaxOutputSSBO {vec4 minmax[];};
layout ( local_size_x = 512 ) in;

shared bbox sdata[ 512 ];

bbox getMinMaxPrimitive(in uint idx){
    vec4 triverts[3];
#pragma optionNV (unroll all)
    const uint i3 = clamp(idx, 0u, uint(GEOMETRY_BLOCK geometryUniform.triangleCount-1)) * 3;
    for (int x=0;x<3;x++) {
        const uint j = i3 + x;
        const vec4 nps = GEOMETRY_BLOCK octreeUniform.project * vec4(verts[j].vertex.xyz, 1.0f);
        triverts[x] = nps / nps.w;
    }
#ifdef ENABLE_AMD_INSTRUCTION_SET
    return bbox(
        min3(triverts[0], triverts[1], triverts[2]), 
        max3(triverts[0], triverts[1], triverts[2])
    );
#else 
    return bbox(
        min(min(triverts[0], triverts[1]), triverts[2]), 
        max(max(triverts[0], triverts[1]), triverts[2])
    );
#endif
    
}

bbox bboxunion(in bbox b1, in bbox b2) {
    return bbox(
        min(b1.mn, b2.mn),
        max(b1.mx, b2.mx)
    );
}

void main() {
    const uint tid = gl_LocalInvocationID.x;
    const uint gridSize = (gl_WorkGroupSize.x*2) * gl_NumWorkGroups.x;
    uint i = gl_WorkGroupID.x * (gl_WorkGroupSize.x*2) + tid;

    sdata[tid].mn = vec4( 100000.f);
    sdata[tid].mx = vec4(-100000.f);

    while (i < GEOMETRY_BLOCK geometryUniform.triangleCount) {
        sdata[tid] = bboxunion(sdata[tid], bboxunion(getMinMaxPrimitive(i), getMinMaxPrimitive(i + gl_WorkGroupSize.x)));
        i += gridSize;
    };
    barrier(); memoryBarrier();

#pragma optionNV (unroll all)
    for (uint i=(gl_WorkGroupSize.x>>1);i>=1;i>>=1) {
        if (tid < i) {
            sdata[tid] = bboxunion(sdata[tid], sdata[tid + i]); 
        } 
        if (i > gl_SubGroupSizeARB) {
            barrier(); memoryBarrier();
        }
    }

    if (tid == 0) {
        minmax[gl_WorkGroupID.x*2 + 0] = sdata[0].mn - 0.00001f; 
        minmax[gl_WorkGroupID.x*2 + 1] = sdata[0].mx + 0.00001f; 
    }
}
