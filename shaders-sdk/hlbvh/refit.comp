#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/STOmath.glsl"
#include "./includes.glsl"

const int work_size = 1024;
shared int aCounter;
shared int aRange[2];

layout ( local_size_x = work_size ) in;

initAtomicIncFunction(aCounter, aCounterInc, int);

void main() {
    int localID = int(gl_LocalInvocationID.x);

    // init counter
    if (localID == 0) {
        aCounter = 0;
        aRange[0] = 0;
        aRange[1] = 0;
    }

    memoryBarrier(); barrier(); 
    {
        int n = GEOMETRY_BLOCK geometryUniform.triangleCount;
        int wcount = min(n <= 0 ? 0 : ((n - 1) / int(gl_WorkGroupSize.x) + 1), 50000);
        for (int w=0;w<wcount;w++) {
            int globalID = w * int(gl_WorkGroupSize.x) + localID;
            if (globalID < n && globalID >= 0) {
                int idx = atomicExchange(LeafIndices[globalID], -1);
                if (idx >= 0) {
                    atomicExchange(Flags[idx], 0);
                    atomicExchange(Actives[aCounterInc(true)], idx);
                }
            }
        }
    }

    // from lower to upper
    for (int l=0;l<256;l++) {
        // sync count
        memoryBarrier(); barrier(); 
        if (localID == 0) {
            aRange[0] = aRange[1];
            aRange[1] = aCounter;
        }

        // sync count
        memoryBarrier(); barrier(); 
        if (aRange[1] <= aRange[0]) break;

        int n = aRange[1] - aRange[0];
        int wcount = min(n <= 0 ? 0 : ((n - 1) / int(gl_WorkGroupSize.x) + 1), 50000);
        for (int w=0;w<wcount;w++) {
            int globalID = w * int(gl_WorkGroupSize.x) + localID;
            if (globalID < n && globalID >= 0) {
                // get current level node
                int idx = atomicExchange(Actives[aRange[0]+globalID], -1);
                if (idx >= 0) {
                    HlbvhNode nd = Nodes[idx];

                    // if parent node is not occupy
                    bool validParent = nd.pdata.z >= 0 && idx >= 0;
                    if (validParent) validParent = atomicCompSwap(Flags[nd.pdata.z], 0, 1) == 1;

                    // defer parent nodes
                    if (validParent) atomicExchange(Actives[aCounterInc( validParent )], nd.pdata.z);

                    // process unifying boxes
                    if (nd.pdata.x != nd.pdata.y && idx >= 0) {
                        // get nodes
                        HlbvhNode ln = Nodes[nd.pdata.x];
                        HlbvhNode rn = Nodes[nd.pdata.y];

                        // unify bounding box
                        bbox bound = nd.box;
                        bound.mn = min(ln.box.mn, rn.box.mn);
                        bound.mx = max(ln.box.mx, rn.box.mx);
                        nd.box = bound;

                        // store if valid
                        Nodes[idx] = nd;
                    }
                }
            }
        }
        
    }
    
}
