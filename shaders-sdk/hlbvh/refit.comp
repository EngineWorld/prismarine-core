#version 450

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "./includes.glsl"

bbox bboxunion(in bbox b1, in bbox b2) {
    return bbox(
        min(b1.mn, b2.mn),
        max(b1.mx, b2.mx)
    );
}

void main() {
    const int globalID = int(gl_GlobalInvocationID.x);
    if (globalID >= GEOMETRY_BLOCK geometryUniform.triangleCount) return;

    int idx = Leafs[globalID].parent;
    for(int i=0;i<256;i++) {
        idx = Nodes[idx].parent;
        if (atomicCompSwap(Flags[idx], 0, 1) == 1) {
            const int lc = Nodes[idx].range.x;
            const int rc = Nodes[idx].range.y;
            Nodes[idx].box = bboxunion(Nodes[lc].box, Nodes[rc].box);
        } else {
            break;
        }
        if (idx <= 0) break;
    }
}
