#version 450

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    const int globalID = int(gl_GlobalInvocationID.x);
    if (globalID >= GEOMETRY_BLOCK geometryUniform.triangleCount) return;

    int idx = Leafs[globalID].pdata.z;
    HlbvhNode nd = Nodes[idx];
    for(int i=0;i<256;i++) {
        idx = nd.pdata.z;
        if (idx <= 0) break; 

        nd = Nodes[idx];
        if (atomicCompSwap(Flags[idx], 0, 1) == 1) {
            HlbvhNode ln = Nodes[nd.pdata.x];
            HlbvhNode rn = Nodes[nd.pdata.y];
            Nodes[idx].box.mn = min(ln.box.mn, rn.box.mn) - 0.00001f;
            Nodes[idx].box.mx = max(ln.box.mx, rn.box.mx) + 0.00001f;
        } else {
            break;
        }
        
    }
}
