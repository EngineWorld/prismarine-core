#version 450

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

bbox bboxunion(in bbox b1, in bbox b2) {
    return bbox(
        min(b1.mn, b2.mn) - 0.00001f,
        max(b1.mx, b2.mx) + 0.00001f
    );
}

void main() {
    const int globalID = int(gl_GlobalInvocationID.x);
    if (globalID >= GEOMETRY_BLOCK geometryUniform.triangleCount) return;

    int idx = Leafs[globalID].parent;
    HlbvhNode nd = Nodes[idx];
    for(int i=0;i<256;i++) {
        idx = nd.parent;
        nd = Nodes[idx];
        if (atomicCompSwap(Flags[idx], 0, 1) == 1) {
            HlbvhNode lc = Nodes[nd.range.x];
            HlbvhNode rc = Nodes[nd.range.y];
            nd.box = bboxunion(lc.box, rc.box);
            Nodes[idx] = nd;
        } else {
            break;
        }
        if (idx <= 0) break;
    }
}
