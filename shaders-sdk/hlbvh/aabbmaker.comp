#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/vertex.glsl"
#include "../include/morton.glsl"
#include "../include/STOmath.glsl"

layout ( std430, binding = 0 ) restrict buffer MortoncodesBlock {
    MORTONTYPE Mortoncodes[];
} mortonBuf;

layout ( std430, binding = 1 ) restrict buffer IndicesBlock {
    int MortoncodesIndices[];
} mortonIdc;

layout ( std430, binding = 2 ) restrict buffer CounterBlock {
    int aabbCounter[1];
} counters;

layout ( std430, binding = 3 ) restrict buffer OutLeafBlock {
    HlbvhNode OutLeafs[];
} outLeafsBuf;

LOCAL_SIZE_LAYOUT;

uint add(inout uint mem, in uint ops){
    uint tmp = mem; mem += ops; return tmp;
}

initAtomicIncFunction(counters.aabbCounter[0], atomicIncAABB, int)

bbox calcTriBox(in mat3x4 triverts){
    bbox result;
#ifdef ENABLE_AMD_INSTRUCTION_SET
    result.mn = min3(triverts[0], triverts[1], triverts[2]) - 0.00001f;
    result.mx = max3(triverts[0], triverts[1], triverts[2]) + 0.00001f;
#else
    result.mn = min(min(triverts[0], triverts[1]), triverts[2]) - 0.00001f;
    result.mx = max(max(triverts[0], triverts[1]), triverts[2]) + 0.00001f;
#endif
    return result;
}


//float intersectCubeSingle(in vec3 origin, in vec3 ray, in vec4 cubeMin, in vec4 cubeMax, inout float near, inout float far);



vec2 intersectCube(in vec3 origin, in vec3 ray, in vec4 cubeMin, in vec4 cubeMax) {
    vec3 dr = 1.0f / ray;
    vec3 tMin = (cubeMin.xyz - origin) * dr;
    vec3 tMax = (cubeMax.xyz - origin) * dr;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
#ifdef ENABLE_AMD_INSTRUCTION_SET
    float tNear = max3(t1.x, t1.y, t1.z);
    float tFar  = min3(t2.x, t2.y, t2.z);
#else
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);
#endif
    bool isCube = lessEqualF(tNear, tFar); //&& greaterEqualF(tFar, 0.f);
    //return isCube ? vec2(greaterEqualF(tNear, 0.f) ? min(tNear, tFar) : max(tNear, tFar)) : vec2(INFINITY);
    return isCube ? vec2(min(tNear, tFar), max(tNear, tFar)) : vec2(INFINITY);
}


vec4 points[6];

// check if point is containing
bool isContain(in vec4 point, in bbox abox){
    return (
        lessEqualF(point.x, abox.mx.x) && greaterEqualF(point.x, abox.mn.x) && 
        lessEqualF(point.y, abox.mx.y) && greaterEqualF(point.y, abox.mn.y) && 
        lessEqualF(point.z, abox.mx.z) && greaterEqualF(point.z, abox.mn.z)
    );
}

// compaction box by triangle
bbox compactBoxByTriangle(in bbox abox, in mat3x4 triverts){
    // triangle vectors
    vec3 e0 = normalize(triverts[1].xyz - triverts[0].xyz);
    vec3 e1 = normalize(triverts[2].xyz - triverts[1].xyz);
    vec3 e2 = normalize(triverts[0].xyz - triverts[2].xyz);

    float l0 = length(triverts[1].xyz - triverts[0].xyz);
    float l1 = length(triverts[2].xyz - triverts[1].xyz);
    float l2 = length(triverts[0].xyz - triverts[2].xyz);

    // box distances
    vec2 d0 = intersectCube(triverts[0].xyz, e0.xyz, abox.mn, abox.mx);
    vec2 d1 = intersectCube(triverts[1].xyz, e1.xyz, abox.mn, abox.mx);
    vec2 d2 = intersectCube(triverts[2].xyz, e2.xyz, abox.mn, abox.mx);

    uint pcount = 0;

    if (d0.x < INFINITY) {
        vec4 p0 = vec4(triverts[0].xyz + e0.xyz * sign(d0.x) * min(abs(d0.x), l0), 1.0f);
        vec4 p1 = vec4(triverts[0].xyz + e0.xyz * sign(d0.y) * min(abs(d0.y), l0), 1.0f);

        if (isContain(p0, abox) && greaterEqualF(d0.x, 0.f)) points[pcount++] = p0;
        if (isContain(p1, abox) && greaterEqualF(d0.y, 0.f)) points[pcount++] = p1;
    }

    if (d1.x < INFINITY) {
        vec4 p0 = vec4(triverts[1].xyz + e1.xyz * sign(d1.x) * min(abs(d1.x), l1), 1.0f);
        vec4 p1 = vec4(triverts[1].xyz + e1.xyz * sign(d1.y) * min(abs(d1.y), l1), 1.0f);

        if (isContain(p0, abox) && greaterEqualF(d1.x, 0.f)) points[pcount++] = p0;
        if (isContain(p1, abox) && greaterEqualF(d1.y, 0.f)) points[pcount++] = p1;
    }

    if (d2.x < INFINITY) {
        vec4 p0 = vec4(triverts[2].xyz + e2.xyz * sign(d2.x) * min(abs(d2.x), l2), 1.0f);
        vec4 p1 = vec4(triverts[2].xyz + e2.xyz * sign(d2.y) * min(abs(d2.y), l2), 1.0f);

        if (isContain(p0, abox) && greaterEqualF(d2.x, 0.f)) points[pcount++] = p0;
        if (isContain(p1, abox) && greaterEqualF(d2.y, 0.f)) points[pcount++] = p1;
    }

    bbox result;
    result.mn =  vec4(100000.f);
    result.mx = -vec4(100000.f);

    for (int i=0;i<pcount;i++) {
        result.mn = min(points[i], result.mn);
        result.mx = max(points[i], result.mx);
    }

    result.mn -= 0.00001f;
    result.mx += 0.00001f;

    return result;
}

const int splitLimit = 0;
const int splitLimitStack = (1 << (splitLimit+1))-1;

void main() {
    int t = int(gl_GlobalInvocationID.x);
    if (t >= GEOMETRY_BLOCK geometryUniform.triangleCount) return;

    vec4 mn = vec4(INFINITY);
    vec4 mx = vec4(-INFINITY);

    mat3x4 triverts = mat3x4(
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(t)), 0), 
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(t)), 1), 
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(t)), 2)
    );

    triverts[0] = mult4(triverts[0], GEOMETRY_BLOCK geometryUniform.transform);
    triverts[1] = mult4(triverts[1], GEOMETRY_BLOCK geometryUniform.transform);
    triverts[2] = mult4(triverts[2], GEOMETRY_BLOCK geometryUniform.transform);

    vec4 tcenter = (triverts[0] + triverts[1] + triverts[2]) * 0.33333333333333f;
    if (length(abs(triverts[0] - tcenter).xyz + abs(triverts[1] - tcenter).xyz + abs(triverts[2] - tcenter).xyz) < 1.e-5) return;

    uint countBox = 1;
    bbox bstack[splitLimitStack];
    uint bsplit[splitLimitStack];

    bstack[0] = calcTriBox(triverts);
    bsplit[0] = 0;

    vec4 factorRange = (bstack[0].mx - bstack[0].mn);
    float maxSplitFactor = dot(factorRange.xyz, vec3(2.0f));
    int maxSplits = clamp(int(floor(maxSplitFactor)), 0, splitLimit);

    for (int i=0;i<splitLimitStack;i++) {
        if (i >= countBox) break;

        uint splitcnt = bsplit[i];
        bbox bounding = bstack[i];
        vec4 bcenter = (bounding.mn + bounding.mx) * 0.5f;
        vec4 branges = (bounding.mx - bounding.mn);

        if (greaterEqualF(branges.x, 0.f) && greaterEqualF(branges.y, 0.f) && greaterEqualF(branges.z, 0.f)) {
            if (splitcnt >= maxSplits) {
                int to = atomicIncAABB(true);

                mortonIdc.MortoncodesIndices[to] = int(to);
    #ifdef INT64_MORTON
                mortonBuf.Mortoncodes[to] = MORTONTYPE(encodeMorton3_64(clamp(
                    uvec3(floor(clamp(bcenter.xyz, vec3(0.0f), vec3(0.99999f)) * 2097152.0f)), 
                    uvec3(0), uvec3(0x1FFFFF))));
    #else
                mortonBuf.Mortoncodes[to] = MORTONTYPE(encodeMorton3_64(clamp(
                    uvec3(floor(clamp(bcenter.xyz, vec3(0.0f), vec3(0.99999f)) * 1024.0f)), 
                    uvec3(0), uvec3(0x3FF))));
    #endif

                HlbvhNode outLeaf = outLeafsBuf.OutLeafs[to];
                outLeaf.box = bounding;
                outLeaf.pdata.xy = ivec2(to);
                outLeaf.pdata.zw = ivec2(-1, t);
                outLeafsBuf.OutLeafs[to] = outLeaf;
            } else {
                bbox bleft = bounding, bright = bounding;
                if (branges.x >= branges.y && branges.x > branges.z) {
                    bleft.mx.x = bright.mn.x = bcenter.x;
                } else 
                if (branges.y >= branges.z && branges.y > branges.x) {
                    bleft.mx.y = bright.mn.y = bcenter.y;
                } else {
                    bleft.mx.z = bright.mn.z = bcenter.z;
                }

                uint bLeftId = countBox++, bRightId = countBox++;
                bstack[bLeftId] = compactBoxByTriangle(bleft, triverts);
                bsplit[bLeftId] = splitcnt+1;
                bstack[bRightId] = compactBoxByTriangle(bright, triverts);
                bsplit[bRightId] = splitcnt+1;
            }
        }
    }





}
