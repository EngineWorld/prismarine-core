#version 460 core
#include "./includes.glsl"

shared UVEC64_WARP localSort64[BLOCK_SIZE];
shared uint localSort[BLOCK_SIZE];
shared uint localSortVal[BLOCK_SIZE];
shared uint localHistogramToCarry[RADICES];
shared uint localHistogram[RADICES];
shared uint warpPScan[WORK_SIZE];
shared uint psums[WORK_SIZE];
shared uint totals[WORK_SIZE];
shared uint bcount;
//shared uint sum[WORK_SIZE];

//layout (local_size_x = WARP_SIZE, local_size_y = WORK_SIZE) in;
layout (local_size_x = BLOCK_SIZE) in;

// prefix scan for WARP vector
uint prefix_scan(inout UVEC_WARP v){
    BVEC_WARP btf = (v == 1);
    UVEC_BALLOT_WARP bits = ballotHW(btf);
    UVEC_WARP sum = bitCount64(bits);
    v = bitCount64(bits & genLtMask());
    return sum;
}


// WARP version of prefix_sum
uint prefix_sum(in uint data, inout uint total_sum) {
    UVEC_WARP rsort = data;
    for (uint i = 1; i < WORK_SIZE_RT; i <<= 1) {
        rsort += READ_LANE(rsort, LANE_IDX - i) * uint(LANE_IDX < WORK_SIZE_RT);
    }
    total_sum = READ_LANE(rsort, WORK_SIZE_RT-1);
    UVEC_WARP result = READ_LANE(rsort, LANE_IDX - 1) * uint(LANE_IDX < WORK_SIZE_RT);
    return result;
}



void sortBits(inout UVEC64_WARP sort, inout uint sortVal){
    UVEC_WARP addr = LT_IDX;
    for (int i=0;i<BITS_PER_PASS;i++) {
        BVEC_WARP cmp = BFE(sort, int(Shift) + i, 1) == 0;
        UVEC_WARP warpKey = UVEC_WARP(cmp);

        // prefix scan for WARP vector
        uint pscan = prefix_scan(warpKey);
        if (LANE_IDX == 0) warpPScan[LC_IDX] = pscan; // cache by WARP ID
        memoryBarrier(); barrier();

        // use LANE_IDX as LC_IDX, so we did caching
        if (LC_IDX == 0) {
            uint warpTotal = 0;
            uint prefixSum = prefix_sum(warpPScan[LANE_IDX], warpTotal);
            if (LANE_IDX < WORK_SIZE_RT) {
                psums [LANE_IDX] = prefixSum;
                totals[LANE_IDX] = warpTotal;
            }
        }
        memoryBarrier(); barrier();
        
        // use generalized local indexing (incl. warps)
        warpKey += psums[LC_IDX];

        UVEC_WARP destAddr = cmp ? warpKey : (addr - warpKey + totals[LC_IDX]);
        localSort64 [destAddr] = sort;
        localSortVal[destAddr] = sortVal;
        memoryBarrier(); barrier();

        sort    = localSort64 [addr];
        sortVal = localSortVal[addr];
        memoryBarrier(); barrier();
    }
}

void main(){
     UVEC_WARP localIdx = LT_IDX;
     UVEC_WARP def = 0xFFFFFFFFu;

    if (localIdx < RADICES) localHistogramToCarry[localIdx] = Histogram[localIdx * WG_COUNT + WG_IDX];
    memoryBarrier(); barrier();

    blocks_info blocks = get_blocks_info(NumKeys, WG_IDX);
    UVEC_WARP addr = blocks.offset + localIdx;
    if (LANE_IDX == 0 && LC_IDX == 0) bcount = blocks.count;
    memoryBarrier(); barrier();

    for ( int i_block=0; i_block < 1024 ; i_block++ ) {
        if (i_block >= bcount) break;

        BVEC_WARP validAddress = addr < NumKeys;
        UVEC64_WARP data       = validAddress ? UVEC64_WARP(KeyIn[addr]) : 0xFFFFFFFFFFFFFFFFul;
          UVEC_WARP dataValue  = validAddress ? ValueIn[addr] : 0u;
        sortBits(data, dataValue);

        UVEC_WARP k = UVEC_WARP(BFE(data, int(Shift), BITS_PER_PASS));
        UVEC_WARP      key = k;
        UVEC_WARP  histKey = key;
        UVEC_WARP localKey = key + (LC_IDX / RADICES) * RADICES;
        if (localIdx < WORK_SIZE_RT) localSort[LANE_IDX] = 0;
        memoryBarrier(); barrier();

        atomicAdd(localSort[localKey], uint(validAddress));
        UVEC_WARP offset = localHistogramToCarry[k] + localIdx;
        memoryBarrier(); barrier();

        // Use LANE_IDX as LC_IDX (non-vector mode)
        if (LC_IDX == 0) {
            UVEC_WARP warpHistogram = 0;
            UVEC_WARP sum = 0;
            if (LANE_IDX < RADICES) {
                for (int i=0;i<WORK_SIZE_RT/RADICES;i++) sum += localSort[i * RADICES + LANE_IDX];
                if (LANE_IDX < RADICES) localHistogramToCarry[LANE_IDX] += warpHistogram = sum;
            }

            uint tmp = 0;
            warpHistogram = READ_LANE(warpHistogram, LANE_IDX-1);
            tmp = READ_LANE(warpHistogram, LANE_IDX-3) + READ_LANE(warpHistogram, LANE_IDX-2) + READ_LANE(warpHistogram, LANE_IDX-1);
            warpHistogram += tmp;
            tmp = READ_LANE(warpHistogram, LANE_IDX-12) + READ_LANE(warpHistogram, LANE_IDX-8) + READ_LANE(warpHistogram, LANE_IDX-4);
            warpHistogram += tmp;
        
            if (LANE_IDX < RADICES) {
                localHistogram[LANE_IDX] = warpHistogram;
            }
        }
        memoryBarrier(); barrier();

        UVEC_WARP outKey = offset - localHistogram[histKey];
        if (validAddress)   KeyOut[outKey] = KEYTYPE(data);
        if (validAddress) ValueOut[outKey] = dataValue;
        memoryBarrier(); barrier();

        addr += BLOCK_SIZE;
    }
}

