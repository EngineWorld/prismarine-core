#version 450 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

#include "./includes.glsl"

#define WG_COUNT 32

shared uint localHistogram[WG_COUNT];
void prefixScan() {
    UVEC_WARP localIdx = LT_IDX;
    memoryBarrier(); barrier();
    uint tmp = localIdx >= 1 && localIdx < RADICES ? localHistogram[localIdx-1] : 0;
    memoryBarrier(); barrier();
    if (localIdx < RADICES) localHistogram[localIdx] = tmp;

    // reduction prefix-scan
    for (int i=1;i<RADICES;i<<=1) {
        memoryBarrier(); barrier();
        uint idx = localIdx;
        uint off = idx >= i && idx < RADICES ? localHistogram[idx-i] : 0;
        uint hst = idx < RADICES ? localHistogram[idx] : 0;
        memoryBarrier(); barrier();
        if (idx < RADICES) localHistogram[idx] = off + hst;
    }
    memoryBarrier(); barrier();
}

layout (local_size_x = RADICES) in;

shared uint seed[RADICES];
void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LC_IDX = (gl_LocalInvocationID.x / gl_SubGroupSizeARB);
    LANE_IDX = gl_SubGroupInvocationARB;

    // prefix scans of workers for every radice
    uint prv = LT_IDX;
    for (uint wk=0;wk<WG_COUNT;wk++) {
        uint idx = LT_IDX + wk * RADICES;
        uint pfx = LT_IDX < RADICES && wk > 0 ? Histogram[prv] : 0;
        uint val = LT_IDX < RADICES && wk > 0 ? PrefixSum[prv] : 0;
        if (LT_IDX < RADICES) Histogram[idx] = val + pfx;
        prv = idx;
    }
    memoryBarrier(); barrier();

    // collect pre-seeds
    if (LT_IDX < RADICES) {
        localHistogram[LT_IDX] = Histogram[LT_IDX + (WG_COUNT-1) * RADICES] + PrefixSum[LT_IDX + (WG_COUNT-1) * RADICES];
    }

    // prefix scan of seeds
    prefixScan();

    // apply prefix scans
    for (uint wk=0;wk<WG_COUNT;wk++) {
        uint idx = LT_IDX + wk * RADICES;
        if (LT_IDX < RADICES) PrefixSum[idx] = Histogram[idx] + localHistogram[LT_IDX];
    }
}
