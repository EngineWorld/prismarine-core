#version 460 core
#include "./includes.glsl"

#define WG_COUNT 8

shared uint localSort[WG_COUNT];
uint prefixSum(uint data, inout uint total_sum) {
    localSort[LT_IDX] = data;
    memoryBarrier(); barrier();
    for (uint i = 1; i < WG_COUNT; i <<= 1) {
        uint tmp = localSort[LT_IDX - i] * uint(LT_IDX >= i && LT_IDX < WG_COUNT);
        memoryBarrier(); barrier();
        localSort[LT_IDX] += tmp;
        memoryBarrier(); barrier();
    }
    total_sum = localSort[WG_COUNT - 1];
    return localSort[LT_IDX - 1] * uint(LT_IDX > 0);
}

layout (local_size_x = WG_COUNT) in;

shared uint seed;
void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LC_IDX = (gl_LocalInvocationID.x / gl_SubGroupSizeARB);
    LANE_IDX = (gl_LocalInvocationID.x % gl_SubGroupSizeARB);

    if (LT_IDX == WG_COUNT - 1) seed = 0;
    memoryBarrier(); barrier();
    for(uint d=0;d<RADICES;d++){
        uint idx = d + LT_IDX * RADICES; //d * WG_COUNT + LT_IDX;
        uint val = LT_IDX < WG_COUNT ? PrefixSum[idx] : 0;
        uint total = 0;
        uint res = prefixSum(val, total);
        if (LT_IDX < WG_COUNT) PrefixSum[idx] = res + seed;
        if (LT_IDX == WG_COUNT - 1) seed += res + val;
        memoryBarrier(); barrier();
    }
}
