#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"

#define MB_PAGES 3

layout ( binding = 0, rgba32f ) uniform image2D presampled;
layout ( binding = 1, rgba32f ) uniform image2D prefiltered;
layout ( binding = 2, rgba32f ) uniform image2D prevsample;
LOCAL_SIZE_LAYOUT;


/*
vec3 encodePalYuv(in vec3 rgb)
{
    rgb = pow(rgb, vec3(2.0)); // gamma correction
    return vec3(
        dot(rgb, vec3(0.299, 0.587, 0.114)),
        dot(rgb, vec3(-0.14713, -0.28886, 0.436)),
        dot(rgb, vec3(0.615, -0.51499, -0.10001))
    );
}

vec3 decodePalYuv(in vec3 yuv)
{
    vec3 rgb = vec3(
        dot(yuv, vec3(1., 0., 1.13983)),
        dot(yuv, vec3(1., -0.39465, -0.58060)),
        dot(yuv, vec3(1., 2.03211, 0.))
    );
    return pow(rgb, vec3(1.0 / 2.0)); // gamma correction
}



vec4 checkerFetch(in ivec2 tx, in int lod){ 
    vec4 lastColor = imageLoad(prevsample, tx);
    
    vec3 antialiased = lastColor.xyz;
    float mixRate = min(lastColor.w, 0.5f);
    
    vec3 in0 = imageLoad(prefiltered, tx).xyz;
    
    antialiased = mix(antialiased * antialiased, in0 * in0, mixRate);
    antialiased = sqrt(antialiased);
    
    vec3 in1 = imageLoad(prefiltered, tx + ivec2(+1,  0)).xyz;
    vec3 in2 = imageLoad(prefiltered, tx + ivec2(-1,  0)).xyz;
    vec3 in3 = imageLoad(prefiltered, tx + ivec2( 0, +1)).xyz;
    vec3 in4 = imageLoad(prefiltered, tx + ivec2( 0, -1)).xyz;
    vec3 in5 = imageLoad(prefiltered, tx + ivec2(+1, +1)).xyz;
    vec3 in6 = imageLoad(prefiltered, tx + ivec2(-1, +1)).xyz;
    vec3 in7 = imageLoad(prefiltered, tx + ivec2(+1, -1)).xyz;
    vec3 in8 = imageLoad(prefiltered, tx + ivec2(-1, -1)).xyz;
    
    antialiased = encodePalYuv(antialiased);
    in0 = encodePalYuv(in0);
    in1 = encodePalYuv(in1);
    in2 = encodePalYuv(in2);
    in3 = encodePalYuv(in3);
    in4 = encodePalYuv(in4);
    in5 = encodePalYuv(in5);
    in6 = encodePalYuv(in6);
    in7 = encodePalYuv(in7);
    in8 = encodePalYuv(in8);
    
    vec3 minColor = min(min(min(in0, in1), min(in2, in3)), in4);
    vec3 maxColor = max(max(max(in0, in1), max(in2, in3)), in4);
    minColor = mix(minColor, min(min(min(in5, in6), min(in7, in8)), minColor), 0.5f);
    maxColor = mix(maxColor, max(max(max(in5, in6), max(in7, in8)), maxColor), 0.5f);
    
   	vec3 preclamping = antialiased;
    antialiased = clamp(antialiased, minColor, maxColor);
    
    mixRate = 1.0f / (1.0f / mixRate + 1.0f);
    
    vec3 diff = antialiased - preclamping;
    float clampAmount = dot(diff, diff);
    
    mixRate += clampAmount * 4.0f;
    mixRate = clamp(mixRate, 0.05f, 0.5f);
    
    antialiased = decodePalYuv(antialiased);
    return vec4(antialiased, mixRate);
}*/


vec4 checkerFetch(in ivec2 tx, in int lod){ 
    vec4 lastColor = imageLoad(presampled, tx);
    return lastColor;
}

void main(){
    int it = int(gl_GlobalInvocationID.x);
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    ivec2 whs = ivec2(imageSize(presampled).xy);
    ivec3 xyl = ivec3(it % whs.x, it / whs.x, 0);

    imageStore(prefiltered, xyl.xy, checkerFetch(xyl.xy, 0));
}
