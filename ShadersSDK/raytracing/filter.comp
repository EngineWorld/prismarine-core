#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"

#define MB_PAGES 3

layout ( binding = 0, rgba32f ) uniform image2D presampled;
layout ( binding = 1, rgba32f ) uniform image2D prefiltered;
LOCAL_SIZE_LAYOUT;

void mediumSwap(inout vec4 c0, inout vec4 c1){
    vec4 mn = mix(c0, c1, lessThanEqual(c0, c1));
    vec4 mx = mix(c0, c1, greaterThanEqual(c0, c1));
    c0 = mn;
    c1 = mx;
}

vec4 median(in vec4 cl[3], in int n){
    for(int i=0;i<n-1;i++){
        for(int j=i+1;j<n;j++){
            mediumSwap(cl[i], cl[j]);
        }
    }
    return cl[n >> 1];
}

vec4 checkerFetch(in ivec2 tx, in int lod){ 
    vec4 t00 = imageLoad(presampled, tx);//texelFetch(samples, tx, lod);
    if (RAY_BLOCK cameraUniform.interlace == 1){
        vec4 t10 = imageLoad(presampled, tx + ivec2(1, 0));//texelFetch(samples, tx + ivec2(1, 0), lod);
        vec4 t01 = imageLoad(presampled, tx + ivec2(0, 1));//texelFetch(samples, tx + ivec2(0, 1), lod);
        vec4 xyf[3] = {t10, t00, t01};
        t00 = median(xyf, 3) * 0.5f + t00 * 0.5f;
    }
    return t00;
}

void main(){
    int it = int(gl_GlobalInvocationID.x);
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    ivec2 whs = ivec2(imageSize(presampled).xy);
    ivec3 xyl = ivec3(it % whs.x, it / whs.x, 0);

    imageStore(prefiltered, xyl.xy, checkerFetch(xyl.xy, 0));
}
