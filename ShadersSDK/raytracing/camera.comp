#version 450 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"

LOCAL_SIZE_LAYOUT;

vec3 rotate_vector( in vec4 quat, in vec3 vec ) {
    return vec + 2.0 * cross( cross( vec, quat.xyz ) + quat.w * vec, quat.xyz );
}

vec4 rotation_quat( in vec3 axis, in float half_angle ) {
    return vec4(axis * sin(half_angle), cos(half_angle));
}

void main()
{
    int enable360 = RAY_BLOCK cameraUniform.enable360;
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    int idx = int(gl_GlobalInvocationID.x);
    globalInvocationSMP = idx;

    ivec2 xy = ivec2(idx % wh.x, idx / wh.x);
    vec2 sceneResInv = 1.0f / vec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    if (xy.x < wh.x && xy.y < wh.y) {
#ifdef RT_OPTIMIZED
        vec2 coord = (vec2(xy) + clamp(vec2(0.5f), vec2(0.00001f), vec2(0.99999f))) * sceneResInv;
#else
        vec2 coord = (vec2(xy) + clamp(vec2(random(), random()), vec2(0.00001f), vec2(0.99999f))) * sceneResInv;
#endif

        Texel txfi = texelBuf.nodes[idx];
        txfi.coord.x = coord.x;
        txfi.coord.y = coord.y;
        txfi.EXT = _ext4(-1,-1,-1,-1);
        texelBuf.nodes[idx] = txfi;

        vec4 orig = vec4(0.f, 0.0f, 0.f, 1.0f);
        vec4 dir = vec4(0.f);
        vec4 eye = vec4(vec3(0.0f), 1.0f);
        eye = mult4(RAY_BLOCK cameraUniform.camInv, eye);
        if (enable360 == 1) {
            vec2 pic = ((coord.xy * 2.0f - 1.0f) * vec2(-1.f, 0.5f)) * PI;
            vec3 vctr = vec3(
                cos(pic.y) * cos(pic.x),
                cos(pic.y) * sin(pic.x),
                sin(pic.y)
            );
            vctr = rotate_vector(rotation_quat(vec3(0.f, 0.f, -1.f), PI / 4.f), vctr);
            vctr = rotate_vector(rotation_quat(vec3(1.f, 0.f,  0.f), PI / 4.f), vctr);

            orig = mult4(RAY_BLOCK cameraUniform.camInv, vec4(0.0f, 0.0f, 0.0f, 1.0f));
             dir = mult4(RAY_BLOCK cameraUniform.camInv, vec4(vctr, 0.f));
        } else {
            vec4 co = divW(mult4(RAY_BLOCK cameraUniform.camInv, mult4(RAY_BLOCK cameraUniform.projInv, vec4(coord * 2.0f - 1.0f, 0.999f, 1.0f))));
               orig = divW(mult4(RAY_BLOCK cameraUniform.camInv, mult4(RAY_BLOCK cameraUniform.projInv, vec4(coord * 2.0f - 1.0f, 0.0f, 1.0f))));
                dir = vec4(normalize(co.xyz - orig.xyz), 0.0f);
        }

        // apply DOF
#ifdef EXPERIMENTAL_DOF
        float dofFocusRadius = 10.f;
        float dofFocalRadius = 1.f / 16.f;
        vec4 defEye = RAY_BLOCK cameraUniform.camInv * vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vec4 focus = defEye + dir * dofFocusRadius;
        vec4 offsetEye = RAY_BLOCK cameraUniform.camInv * vec4(randomCosine(dir.xyz) * dofFocalRadius, 1.0f);
        orig = offsetEye;
        dir = vec4(normalize(focus.xyz - offsetEye.xyz), 0.0f);
#endif

        RayRework ray;
        ray.texel = idx;
        ray.idx = LONGEST;
        ray.direct = dir;
        ray.origin = orig;
        ray.origin.w = 1.0f;
        ray.color = vec4(1.0f);
        ray.final = vec4(0.0f, 0.0f, 0.0f, 1.0f);
        ray.hit = -1;

        ray.bitfield = 0;
        RayActived(ray, 1);
        RayType(ray, 0); // specular
        RayDL(ray, 0);
        RayBounce(ray, 4);
        RayBasis(ray, 1); // is basis ray

        bool interlaced = RAY_BLOCK cameraUniform.interlace == 1;
        if (interlaced) {
            if ((abs(xy.x + xy.y) % 2) == RAY_BLOCK cameraUniform.interlaceStage) RayActived(ray, 0);
        }
        
        if (RayActived(ray) == 1) _collect(ray); // pre-collect
        createRayIdx(ray, idx, interlaced ? (idx / 2) : idx);
    }
}
