#version 460 core

#include "../include/constants.glsl"

#ifdef USE_BINDLESS
#extension GL_ARB_bindless_texture : require
#endif

#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"
#include "../include/vertex.glsl"


struct Material {
    vec4 diffuse;
    vec4 specular;
    vec4 transmission;
    vec4 emissive;

    float ior;
    float roughness;
    float alpharef;
    float unk0f;

    uint diffusePart;
    uint specularPart;
    uint bumpPart;
    uint emissivePart;

    int flags;
    int alphafunc;
    int binding;
    int unk0i;

    ivec4 iModifiers0;
};


const uint MAX_TEXTURES = 72;
layout ( binding = 15, std430 ) readonly buffer MaterialsSSBO {Material submats[];};

#ifdef USE_OPENGL
#ifdef USE_BINDLESS
//layout ( location = 1, bindless_sampler ) uniform sampler2D samplers[MAX_TEXTURES];
layout ( binding = 16 ) readonly buffer Textures { sampler2D samplers[]; };
#else
layout ( location = 1 ) uniform sampler2D samplers[MAX_TEXTURES];
#endif
#else
layout ( binding = 6, set = 1 ) uniform sampler2D samplers[MAX_TEXTURES]; // vulkan API type (future)
#endif

bool haveProp(in Material material, in int prop) {
    return (material.flags & prop) > 0;
}

bool haveProp(in int flags, in int prop) {
    return (flags & prop) > 0;
}

bool validateTexture(in uint binding){
    return binding != 0 && binding != LONGEST && binding < MAX_TEXTURES && textureSize(samplers[binding], 0).x > 0;
}

vec4 fetchTexture(in uint binding, in vec2 texcoord){
    return texture(samplers[binding], texcoord);
}

vec4 fetchTexture(in uint binding, in vec2 texcoord, in ivec2 offset){
    return texture(samplers[binding], texcoord + vec2(offset) / textureSize(samplers[binding], 0));
}






vec4 fetchSpecular(in Material mat, in vec2 texcoord){
    vec4 specular = mat.specular;
    if (validateTexture(mat.specularPart)) {
        specular = fetchTexture(mat.specularPart, texcoord);
    }
    return specular;
}

vec4 fetchEmissive(in Material mat, in vec2 texcoord){
    vec4 emission = vec4(0.0f);
    if (validateTexture(mat.emissivePart)) {
        emission = fetchTexture(mat.emissivePart, texcoord);
    }
    return emission;
}

vec4 fetchTransmission(in Material mat, in vec2 texcoord){
    return mat.transmission;
}

vec4 fetchNormal(in Material mat, in vec2 texcoord){
    vec4 nmap = vec4(0.5f, 0.5f, 1.0f, 1.0f);
    if (validateTexture(mat.bumpPart)) {
        nmap = fetchTexture(mat.bumpPart, vec2(texcoord.x, texcoord.y));
    }
    return nmap;
}

vec4 fetchNormal(in Material mat, in vec2 texcoord, in ivec2 offset){
    vec4 nmap = vec4(0.5f, 0.5f, 1.0f, 1.0f);
    if (validateTexture(mat.bumpPart)) {
        nmap = fetchTexture(mat.bumpPart, vec2(texcoord.x, texcoord.y), offset);
    }
    return nmap;
}

vec3 getNormalMapping(in Material mat, vec2 texcoordi) {
    vec3 tc = fetchNormal(mat, texcoordi).xyz;
    vec3 normal = vec3(0.0f, 0.0f, 1.0f);
    if(equalF(tc.x, tc.y) && equalF(tc.x, tc.z)){
        const ivec3 off = ivec3(0,0,1);
        const float size = 1.0f;
        const float pike = 2.0f;
        vec3 p00 = vec3(0.0f, 0.0f, fetchNormal(mat, texcoordi, off.yy).x * pike);
        vec3 p01 = vec3(size, 0.0f, fetchNormal(mat, texcoordi, off.zy).x * pike);
        vec3 p10 = vec3(0.0f, size, fetchNormal(mat, texcoordi, off.yz).x * pike);
        normal = normalize(cross(p10 - p00, p01 - p00));
    } else {
        normal = normalize(mix(vec3(0.0f, 0.0f, 1.0f), fma(tc, vec3(2.0f), vec3(-1.0f)), vec3(1.0f)));
    }
    return normal;
}

vec4 fetchDiffuse(in Material mat, in vec2 texcoord){
    vec4 result = vec4(0.0f);
    result = mat.diffuse;
    if (validateTexture(mat.diffusePart)) {
        result = fetchTexture(mat.diffusePart, texcoord);
    }
    return result;
}

LOCAL_SIZE_LAYOUT;

void main() {
    int t = int(gl_GlobalInvocationID.x);
    bool overflow = t >= RAY_BLOCK samplerUniform.hitCount;
    globalInvocationSMP = t;

    HitRework hit = hitBuf.nodes[t];
    RayRework ray = rayBuf.nodes[hit.ray];
    Material material = submats[hit.materialID];

    vec3 normal = normalize(hit.normalHeight.xyz);
    vec3 tangent = normalize(hit.tangent.xyz);
    mat3 tbn = mat3(tangent, normalize(cross(normal, tangent)), normal);

    hit.albedo = fetchDiffuse(material, hit.texcoord.xy);
    hit.normalHeight.xyz = normalize(tbn * normalize(getNormalMapping(material, hit.texcoord.xy).xyz));
    hit.emission = vec4(fetchEmissive(material, hit.texcoord.xy).xyz * 2.f, 1.0f);
    hit.metallicRoughness = vec4(fetchSpecular(material, hit.texcoord.xy).xyz, 1.0f);
    
    if (!overflow) {
        hitBuf.nodes[t] = hit;
    }
}
