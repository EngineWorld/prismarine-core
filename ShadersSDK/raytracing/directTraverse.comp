#version 450 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

#define SIMPLIFIED_RAY_MANAGMENT

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/vertex.glsl"

layout ( std430, binding = 9 ) readonly buffer NodesBlock { HlbvhNode Nodes[]; };
//layout ( std430, binding = 17 ) readonly buffer LeafBlock { HlbvhNode Leafs[]; };
//layout ( std430, binding = 18 ) readonly buffer MortonIndicesBlock { int MortonIndices[]; };
layout ( std430, binding = 19 ) restrict buffer IStackGlobal { int deferredStackGlobal[]; };

struct SharedVarsData {
    int bakedStackCount;
    int chainID;
    int prevHt;
    int nextHt;
};

struct TResult {
    float dist;
    int triangleID;
    int materialID; // legacy
    float predist;
    vec4 uv;
    vec4 normal;
};

uint L = 0;
int deferredPtr = 0;
SharedVarsData sharedVarsData;

const int STACK_SIZE = 8;
const int GLOBAL_STACK_SIZE = 8;
const int BAKED_STACK_SIZE = 8;

shared int deferredStack[WORK_SIZE][STACK_SIZE];
vec4 bakedStack[BAKED_STACK_SIZE];



int loadStack(in int STI){
    int value = 0;
    const uint SPT = gl_GlobalInvocationID.x * GLOBAL_STACK_SIZE;
    if (STI < STACK_SIZE) {
        value = atomicExchange(deferredStack[L][STI], -1);
    } else 
    if ((STI - STACK_SIZE) < GLOBAL_STACK_SIZE) {
        value = atomicExchange(deferredStackGlobal[SPT + uint(STI) - STACK_SIZE], -1);
    }
    return value;
}

void storeStack(in int STI, in int VALUE){
    int value = 0;
    const uint SPT = gl_GlobalInvocationID.x * GLOBAL_STACK_SIZE;
    if (STI < STACK_SIZE) {
        atomicExchange(deferredStack[L][STI], VALUE);
    } else 
    if ((STI - STACK_SIZE) < GLOBAL_STACK_SIZE) {
        atomicExchange(deferredStackGlobal[SPT + uint(STI) - STACK_SIZE], VALUE);
    }
}



void reorderTriangles() {
    sharedVarsData.bakedStackCount = min(sharedVarsData.bakedStackCount, BAKED_STACK_SIZE);

    for (int iround = 1; iround < sharedVarsData.bakedStackCount; iround++) {
        for (int index = 0; index < sharedVarsData.bakedStackCount - iround; index++) {
            
            // choice from both
            vec4 bakedPair[2] = {bakedStack[index], bakedStack[index+1]}; // cache
            bool lessIdx = floatBitsToInt(bakedPair[0].w) <= floatBitsToInt(bakedPair[1].w);
            bool deeper = lessF(bakedPair[0].z, bakedPair[1].z);

            // swap or not
            bool swapable = (lessIdx || deeper);
            ivec2 pairIdx = swapable ? ivec2(1, 0) : ivec2(0, 1);
            if (swapable) {
                bakedStack[index  ] = bakedPair[pairIdx.x];
                bakedStack[index+1] = bakedPair[pairIdx.y];
            }
        }
    }

    // initial clean list
    int cleanBakedStackCount = 0;

    // select only unique triangle ID's
    for (int iround = 0; iround < BAKED_STACK_SIZE; iround++) {
        if (iround >= sharedVarsData.bakedStackCount-1) break;
        if (floatBitsToInt(bakedStack[iround+1].w) != floatBitsToInt(bakedStack[iround].w)) {
            bakedStack[cleanBakedStackCount++] = bakedStack[iround];
        }
    }

    // copy last primitive
    if (sharedVarsData.bakedStackCount > 0 && cleanBakedStackCount <= BAKED_STACK_SIZE) {
        bakedStack[cleanBakedStackCount++] = bakedStack[sharedVarsData.bakedStackCount-1];
    }
    
    sharedVarsData.bakedStackCount = cleanBakedStackCount;
}



HitRework interpolateMeshData(inout HitRework res) {
    int tri = floatBitsToInt(res.uvt.w);

    bool validInterpolant = greaterEqualF(res.uvt.z, 0.0f) && lessF(res.uvt.z, INFINITY) && tri != LONGEST;
    //if (anyInvocationARB(validInterpolant)) {
    if (validInterpolant) {
        ivec2 triv = gatherMosaic(getUniformCoord(tri));
        vec2 sz = 1.f / textureSize(vertex_texture, 0);
        vec2 hs = sz * 0.5f;
        vec2 trig = fma(vec2(triv), sz, hs);

        // transposed
        mat3x3 triverts = mat3x3(
            fetchMosaic(vertex_texture, triv, 0).xyz, 
            fetchMosaic(vertex_texture, triv, 1).xyz, 
            fetchMosaic(vertex_texture, triv, 2).xyz
        );
        
        mat3x3 trinorms = transpose(mat3x3(
            fetchMosaic(normal_texture, triv, 0).xyz, 
            fetchMosaic(normal_texture, triv, 1).xyz, 
            fetchMosaic(normal_texture, triv, 2).xyz
        ));

        mat4x3 texcoords = transpose(mat3x4(
            fetchMosaic(texcoords_texture, triv, 0).xyzw, 
            fetchMosaic(texcoords_texture, triv, 1).xyzw, 
            fetchMosaic(texcoords_texture, triv, 2).xyzw
        ));

        mat4x3 mods = transpose(mat3x4(
            fetchMosaic(modifiers_texture, triv, 0).xyzw, 
            fetchMosaic(modifiers_texture, triv, 1).xyzw, 
            fetchMosaic(modifiers_texture, triv, 2).xyzw
        ));

/*
        mat3x3 trinorms = mat3x3(
            textureGather(normal_texture, trig, 0).wzx,
            textureGather(normal_texture, trig, 1).wzx,
            textureGather(normal_texture, trig, 2).wzx
        );

        mat4x3 texcoords = mat4x3(
            textureGather(texcoords_texture, trig, 0).wzx,
            textureGather(texcoords_texture, trig, 1).wzx,
            textureGather(texcoords_texture, trig, 2).wzx,
            textureGather(texcoords_texture, trig, 3).wzx
        );

        mat4x3 mods = mat4x3(
            textureGather(modifiers_texture, trig, 0).wzx,
            textureGather(modifiers_texture, trig, 1).wzx,
            textureGather(modifiers_texture, trig, 2).wzx,
            textureGather(modifiers_texture, trig, 3).wzx
        );
*/
/*
        mat3x3 trinorms = mat3x3(
            textureGatherLodAMD(normal_texture, trig, 0, 0).wzx,
            textureGatherLodAMD(normal_texture, trig, 0, 1).wzx,
            textureGatherLodAMD(normal_texture, trig, 0, 2).wzx
        );

        mat4x3 texcoords = mat4x3(
            textureGatherLodAMD(texcoords_texture, trig, 0, 0).wzx,
            textureGatherLodAMD(texcoords_texture, trig, 0, 1).wzx,
            textureGatherLodAMD(texcoords_texture, trig, 0, 2).wzx,
            textureGatherLodAMD(texcoords_texture, trig, 0, 3).wzx
        );

        mat4x3 mods = mat4x3(
            textureGatherLodAMD(modifiers_texture, trig, 0, 0).wzx,
            textureGatherLodAMD(modifiers_texture, trig, 0, 1).wzx,
            textureGatherLodAMD(modifiers_texture, trig, 0, 2).wzx,
            textureGatherLodAMD(modifiers_texture, trig, 0, 3).wzx
        );
*/

        mat4x3 colors = mat4x3(vec3(1.f), vec3(1.f), vec3(1.f), vec3(1.f));

        

        vec2 uv = res.uvt.xy;
        vec3 vs = vec3(1.0f - uv.x - uv.y, uv);

        vec3 deltaPos1 = triverts[1] - triverts[0];
        vec3 deltaPos2 = triverts[2] - triverts[0];
        vec3 nor = normalize(cross(deltaPos1, deltaPos2));
        vec3 normal = vs * trinorms; // mult matrix
        normal = lessF(length(normal), 0.f) ? nor : normalize(normal);
        normal = normal * sign(dot(normal, nor));

        //mat2x2 deltas = transpose(mat2x2(
        mat2x2 deltas = mat2x2(
            texcoords[0].yz - texcoords[0].x,
            texcoords[1].yz - texcoords[1].x
        );

/*
        bvec2 delta = bvec2(and2(equal(deltas[0], vec2(0.f)), equal(deltas[1], vec2(0.f))));
        mat2x2 deltaUV = mat2(
            mix(deltas[0].xy, vec2(1.0f, 0.0f), delta), // v1-v0
            mix(deltas[1].xy, vec2(0.0f, 1.0f), delta)  // v2-v0
        );
        float f = 1.0f / fma(deltaUV[0].x, deltaUV[1].y, -deltaUV[0].y, deltaUV[1].x);//determinant(deltaUV);
*/

        //                            //x                               //y
        bvec2 delta = bvec2(all(equal(deltas[0], vec2(0.f))), all(equal(deltas[1], vec2(0.f))));
        const vec2 udet = vec2(1.0f, 0.0f);
        mat2x2 deltaUV = mat2(
            mix(deltas[0].xy, udet, bvec2(delta.x)),                  //x (v1-v0, v2-v0)
            mix(deltas[1].yx, udet, bvec2(delta.y)) * vec2(1.f, -1.f) //y (v2-v0, v0-v1)
        );
        float f = 1.f / dot(deltaUV[0], deltaUV[1]);
        vec3 tang = fma(deltaPos1, vec3(deltaUV[1].x), deltaPos2 * deltaUV[1].y) * f;

        if (validInterpolant) {
            res.normalHeight = vec4(normal, 0.0f);
            res.tangent = vec4(normalize(tang - normal * sign(dot(tang, nor))), 0.0f);
            res.texcoord = vs * texcoords; // mult matrix
            res.albedo = packHalf(vec4(0.f));
            res.emission = packHalf(vec4(0.f));
            res.materialID = mats[tri];
        }
    }

    return res;
}

void includeChain(in int chainID, in vec4 intersection){
    // reuse old chains (i.e. override)
    int hid = sharedVarsData.nextHt;
    HitRework absorbHit;
    absorbHit.next = -1;
    absorbHit.uvt = vec4(INFINITY, 0.0f, 0.0f, intBitsToFloat(-1));
    if (hid > 0) absorbHit = hitBuf.nodes[hid];
    sharedVarsData.nextHt = absorbHit.next > 0 ? absorbHit.next : -1; // next linked ID

    // allocate new hit if chain is none
    if (hid == -1 || hid <= 0) {
        hid = atomicIncHt(true);
    }

    // create hit new element
    HitRework hitp = hitBuf.nodes[hid];
    hitp.uvt  = intersection;
    hitp.next = sharedVarsData.nextHt; // for future overriding
    interpolateMeshData(hitp);
    hitBuf.nodes[hid] = hitp;

    // get previous hit, and set current (i.e. exchange)
    int prvh = exchange(sharedVarsData.prevHt, hid);

    // link previous element (or header) with currect
    if (prvh == -1) {
        sharedVarsData.chainID = hid;
    } else {
        atomicExchange(hitBuf.nodes[prvh].next, hid);
    }
    
}

TResult choiceBaked(inout TResult res, in vec3 orig, in vec3 dir, in int tpi) {
    reorderTriangles();
    for (int i=0;i<sharedVarsData.bakedStackCount;i++) {
        includeChain(i, bakedStack[i]);
    }
    return res;
}


TResult testIntersectionPacked(inout TResult res, in vec3 orig, in vec3 dir, in ivec2 tri, in bvec2 isValid) {
    bvec2 validTriangles = and2(and2(greaterThanEqual(tri, ivec2(0)), and2(notEqual(tri, ivec2(LONGEST)), notEqual(tri, ivec2(res.triangleID)))), isValid);
    validTriangles.y = validTriangles.y && tri.x != tri.y; // should not be same

    // change order if first element invalid
    if (!validTriangles.x) {
        tri = tri.yx;
        validTriangles = validTriangles.yx;
    }

    if (anyInvocationARB(any(validTriangles))) {
    //if (any(validTriangles)) {
        // planned packed math
        vec4 uv2 = vec4(0.0f);
        vec2 _d2 = vec2(INFINITY);

        if (anyInvocationARB(any(validTriangles))) {
        //if (any(validTriangles)) {
            _d2 = intersectTriangle2(orig, dir, tri, uv2, validTriangles);
            //_d2.x = intersectTriangle(orig, dir, tri.x, uv2.xz, validTriangles.x);
            //_d2.y = intersectTriangle(orig, dir, tri.y, uv2.yw, validTriangles.y);
        }

        bool near = validTriangles.x && lessF(_d2.x, INFINITY) && lessEqualF(_d2.x, res.predist) && greaterEqualF(_d2.x, 0.0f);
        if (near) {
            if (!equalF(_d2.x, res.predist)) { // if distance not equal, reset baked storage counting
                sharedVarsData.bakedStackCount = 0;
            }
            res.predist = _d2.x;
            res.triangleID = tri.x;
            bakedStack[add(sharedVarsData.bakedStackCount, 1)] = vec4(uv2.xz, _d2.x, intBitsToFloat(tri.x));
        }

        near = validTriangles.y && lessF(_d2.y, INFINITY) && lessEqualF(_d2.y, res.predist) && greaterEqualF(_d2.y, 0.0f);
        if (near) {
            if (!equalF(_d2.y, res.predist)) { // if distance not equal, reset baked storage counting
                sharedVarsData.bakedStackCount = 0;
            }
            res.predist = _d2.y;
            res.triangleID = tri.y;
            bakedStack[add(sharedVarsData.bakedStackCount, 1)] = vec4(uv2.yw, _d2.y, intBitsToFloat(tri.y));
        }
    }

    return res;
}



const int groupSize = 1;

//void includeLeaf2(in vec3 origin, in vec3 direct, in bvec2 valids, in HlbvhNode lnode, in HlbvhNode rnode, inout TResult lastRes){
void includeLeaf2(in vec3 origin, in vec3 direct, in bvec2 valids, in ivec4 lnodepdata, in ivec4 rnodepdata, inout TResult lastRes){
    //if (anyInvocationARB(any(valids))) {
    if (any(valids)) {
        testIntersectionPacked(lastRes, origin.xyz, direct.xyz, ivec2(lnodepdata.w, rnodepdata.w), valids);
    }
}


vec3 projectVoxels(in vec3 orig) {
    return mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(orig, 1.0f)).xyz;
}

vec3 unprojectVoxels(in vec3 orig) {
    return mult4(GEOMETRY_BLOCK geometryUniform.transformInv, vec4(orig, 1.0f)).xyz;
}


TResult traverse(in vec3 origin, in vec3 direct, in bool valid) {
    TResult lastRes;
    lastRes.dist = sharedVarsData.nextHt != -1 ? hitBuf.nodes[sharedVarsData.nextHt].uvt.z : INFINITY;
    lastRes.predist = sharedVarsData.nextHt != -1 ? hitBuf.nodes[sharedVarsData.nextHt].uvt.z : INFINITY;
    lastRes.triangleID = LONGEST;
    lastRes.materialID = LONGEST;
    lastRes.normal = vec4(0.f);

    // deferred stack
    deferredPtr = 0;
    deferredStack[L][0] = -1;
    sharedVarsData.chainID = sharedVarsData.nextHt;
    sharedVarsData.bakedStackCount = 0;
    sharedVarsData.prevHt = -1; // reset previous for avoid depth bug (multi-BVH)
    for (int i=0;i<BAKED_STACK_SIZE;i++) {bakedStack[i] = vec4(vec2(0.0f), INFINITY, LONGEST);}

    // something fix
    direct = normalize(direct);

    // test constants
    vec3 torig = projectVoxels(origin);
    vec3 tdirproj = mult4(vec4(direct, 1.0f), GEOMETRY_BLOCK geometryUniform.transform).xyz;
    //vec3 tdirproj = mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(direct, 0.0f)).xyz;
    float dirlen = length(tdirproj) / max(length(direct), 0.000001f);
    float dirlenInv = 1.f / max(dirlen, 0.000001f);
    vec3 dirproj = normalize(tdirproj);

    


    // test with root node
    float near = INFINITY, far = INFINITY;
    float d = intersectCubeSingle(torig, dirproj, vec4(vec3(-0.00001f), 1.0f), vec4(vec3(1.00001f), 1.0f), near, far);
    float toffset = max(near, 0.f);

#ifdef AMD_F16_BVH
    f16vec3 origined = f16vec3(torig + dirproj * toffset);
    f16vec3 divident = f16vec3(1.f / dirproj);
#else
    vec3 origined = torig + dirproj * toffset;
    vec3 divident = 1.f / dirproj;
#endif

    // init state
    int idx = 0, esc = -1, level = 0, found = -1;
    bool validBox = valid && lessF(d, INFINITY) && lessF(d * dirlenInv, INFINITY) && greaterEqualF(d, 0.0f);
    HlbvhNode node = Nodes[idx];

    bool skipUpstream = false;
    bool skipIntersection = false;
    for (int i=0;i<8192;i++) {
        //if (allInvocationsARB(!validBox)) break;
        if (!validBox) break;

        // choice near box
        bool notLeaf = node.pdata.x != node.pdata.y && validBox;
        //if (anyInvocationARB(notLeaf)) {
        if (notLeaf) {
            //bbox lnodebox = unpackBox(Nodes[node.pdata.x].box);
            //bbox rnodebox = unpackBox(Nodes[node.pdata.y].box);

            bbox lnodebox = (Nodes[node.pdata.x].box);
            bbox rnodebox = (Nodes[node.pdata.y].box);

            vec2 inf2 = vec2(INFINITY), nears = inf2, fars = inf2;
#ifdef AMD_F16_BVH // because precision too low, need fix some precision errors bounding boxes before testing
            //vec2 hits = intersectCubeDual(origined, divident, mat2x4(lnodebox.mn - 0.001f, rnodebox.mn - 0.001f), mat2x4(lnodebox.mx + 0.001f, rnodebox.mx + 0.001f), nears, fars);
            vec2 hits = intersectCubeDual(origined, divident, mat2x4(lnodebox.mn - PZERO, rnodebox.mn - PZERO), mat2x4(lnodebox.mx + PZERO, rnodebox.mx + PZERO), nears, fars);
#else
            vec2 hits = intersectCubeDual(origined, divident, mat2x4(lnodebox.mn, rnodebox.mn), mat2x4(lnodebox.mx, rnodebox.mx), nears, fars);
#endif

            bool leftNear = lessEqualF(nears.x, nears.y);

            bvec2 overlapsGeneral = and2(bvec2(notLeaf),
                and2(and2(
                    and2(
                        and2(lessThanEqual(hits, vec2(INFINITY-PZERO)), lessThanEqual(hits * dirlenInv, vec2(INFINITY-PZERO))),
                        greaterThan(hits, -vec2(PZERO))
                    ),
                    and2(
                        and2(
                            and2(lessThanEqual(nears, vec2(INFINITY-PZERO)), lessThanEqual(nears * dirlenInv, vec2(INFINITY-PZERO))),
                            lessThanEqual((nears + toffset) * dirlenInv - PZERO, vec2(lastRes.predist))
                        ),
                        and2(bvec2(node.pdata.x != -1, node.pdata.y != -1), bvec2(node.pdata.x != node.pdata.y))
                    )
                ), and2(bvec2((leftNear ? node.pdata.y : node.pdata.x) != esc), bvec2(node.pdata.x != esc, node.pdata.y != esc)))
            );

            ivec4 lnodepdata = ivec4(-1);
            ivec4 rnodepdata = ivec4(-1);
            if (overlapsGeneral.x) lnodepdata = Nodes[node.pdata.x].pdata;
            if (overlapsGeneral.y) rnodepdata = Nodes[node.pdata.y].pdata;

            bvec2  overlaps = and2(overlapsGeneral, bvec2(lnodepdata.x != lnodepdata.y, rnodepdata.x != rnodepdata.y)); // is nodes
            overlapsGeneral = and2(overlapsGeneral, bvec2(lnodepdata.x == lnodepdata.y, rnodepdata.x == rnodepdata.y)); // is leafs

            // intersect triangles when accumulate WARP's
            bool anyLeaf = any(overlapsGeneral); skipIntersection = skipIntersection || anyLeaf; // if any leaf found, skipping
            //if (anyInvocationARB(anyLeaf)) {
            if (anyLeaf) {
                bool leftOrder = all(overlapsGeneral) ? leftNear : overlapsGeneral.x;
                bvec2 overlaps = leftOrder ? overlapsGeneral : overlapsGeneral.yx; // additional re-order will in past
                includeLeaf2(origin, direct, overlaps, leftOrder ? lnodepdata : rnodepdata, leftOrder ? rnodepdata : lnodepdata, lastRes);
                skipIntersection = false;
            }

            // choice child nodes by nears
            bool anyOverlap = any(overlaps);
            //if (anyInvocationARB(anyOverlap)) {
            if (anyOverlap) {
                bool  leftOrder = all(overlaps) ? leftNear : overlaps.x; // reorder again
                ivec2 leftright = mix(ivec2(-1), node.pdata.xy, overlaps);
                leftright = leftOrder ? leftright : leftright.yx;

                if (anyOverlap && !skipIntersection) {
                    if (deferredPtr < (STACK_SIZE + GLOBAL_STACK_SIZE) && leftright.y != -1 && leftright.x != leftright.y) storeStack(deferredPtr++, leftright.y);
                    found = leftright.x;
                }
            }
            skipUpstream = skipUpstream || anyOverlap;
        }

        // go to parent 
        if (!skipIntersection && validBox) {
            int ptr = skipUpstream ? deferredPtr : --deferredPtr;
            //int ptr = 0;
            esc = skipUpstream ? -1 : idx;
            idx = ptr >= 0 ? (skipUpstream ? found : loadStack(ptr)) : -1;
            //idx = skipUpstream ? found : node.pdata.z; level += skipUpstream ? 1 : -1;
            validBox = validBox && idx >= 0 && level >= 0 && ptr >= 0;
            if (validBox) node = Nodes[idx]; // for optimized read-write operations
            idx = !validBox ? idx : -1;
        };

        skipUpstream = false; // continue search when found
    }

    lastRes.triangleID = LONGEST;
    choiceBaked(lastRes, origin.xyz, direct.xyz, 0);
    return lastRes;
}

LOCAL_SIZE_LAYOUT;

void main() {
    L = gl_LocalInvocationID.x;

    int it = int(gl_GlobalInvocationID.x);
    bool overflow = it >= RAY_BLOCK samplerUniform.rayCount;
    if (allInvocationsARB(overflow)) return;

    int t = activedBuf.indc[it];
    RayRework ray = rayBuf.nodes[t];
    overflow = RayActived(ray) == 0 || overflow;
    if (allInvocationsARB(overflow)) return;

    // if not overflow, confirm
    if (!overflow) {
        // traverse
        sharedVarsData.nextHt = ray.hit;
        traverse(ray.origin.xyz, ray.direct.xyz, !overflow);
        
        // override chain id
        ray.hit = sharedVarsData.chainID;

        rayBuf.nodes[t] = ray; // avoid invalids
    }
}
