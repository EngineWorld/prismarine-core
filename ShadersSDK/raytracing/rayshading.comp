#version 450 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

// use whitted ray tracing model (no shadows support), which simulate hybrid methods
//#define USE_SIMPLIFIED_MODEL

// can take huge damage to performance, but getting much better quality
//#define USE_NOISE_LESS_BRDF

#include "../include/constants.glsl"

#ifdef USE_BINDLESS
#extension GL_ARB_bindless_texture : require
#endif

#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"
#include "../include/shadinglib.glsl"
#include "../public/environment.glsl"

vec4 composite(in vec4 src, in vec4 dst){
    float oa = src.a + dst.a * (1.0f - src.a);
    return clamp(vec4((src.rgb * src.a + dst.rgb * dst.a * (1.0f - src.a)) / max(oa, 0.00001f), oa), vec4(0.0f), vec4(1.0f));
}




struct SurfaceUnpacked {
     vec4 uvt; // UV, distance, triangle
     vec4 normalHeight; // normal with height mapping, will already interpolated with geometry
     vec4 texcoord;
     vec4 metallicRoughness;

    // color parameters
     vec4 emission;
     vec4 albedo;
};



LOCAL_SIZE_LAYOUT;

void main() {
    int it = int(gl_GlobalInvocationID.x);
    bool overflow = it >= RAY_BLOCK samplerUniform.rayCount;
    bool skipping = overflow;

    int t = activedBuf.indc[it];
    globalInvocationSMP = it;
    RayRework ray = rayBuf.nodes[t];

    int layers = 1; // support only one layer
    int currentLayer = 0;

    SurfaceUnpacked compositedHit[1];
    HitRework firstHit;
    firstHit.next = -1;
    if (ray.hit == -1) {
        compositedHit[0].uvt = vec4(vec2(0.f), INFINITY, intBitsToFloat(-1));
    } else {
        firstHit = hitBuf.nodes[ray.hit];

        int i = 0;
        while (HitActived(firstHit) == 0 && i < 8 && firstHit.next != -1) { // search possible layer
            firstHit = hitBuf.nodes[firstHit.next];
        }

        if (HitActived(firstHit) == 0) { // if none, make as transparent
            compositedHit[0].uvt = firstHit.uvt;
            compositedHit[0].albedo = vec4(0.f);
            compositedHit[0].emission = vec4(0.f);
            compositedHit[0].metallicRoughness = vec4(0.f);;
            compositedHit[0].normalHeight = firstHit.normalHeight;
            firstHit.next = -1;
        } else {
            compositedHit[0].uvt = firstHit.uvt;
            compositedHit[0].albedo = unpackHalf(firstHit.albedo);
            compositedHit[0].emission = unpackHalf(firstHit.emission);
            compositedHit[0].metallicRoughness = unpackHalf(firstHit.metallicRoughness);
            compositedHit[0].normalHeight = firstHit.normalHeight;
        }
    }

    // layers composition
    int searchLayer = 0;
    int hitID = firstHit.next;
    for (int i=0;i<8;i++) {
        if (hitID == -1) break;
        HitRework hit = hitBuf.nodes[hitID];
        if (!equalF(compositedHit[searchLayer].uvt.z, hit.uvt.z)) {
            searchLayer = layers++;
            break; // unsupported
        }

        if (HitActived(hit) == 0) {
            hitID = hit.next;
            continue; // if not actived 
        }

        // composite decals
        vec4 albedo = unpackHalf(hit.albedo);
        compositedHit[searchLayer].uvt = hit.uvt;
        compositedHit[searchLayer].albedo = composite(compositedHit[searchLayer].albedo, albedo);
        compositedHit[searchLayer].normalHeight = mix(compositedHit[searchLayer].normalHeight, hit.normalHeight, albedo.w);
        compositedHit[searchLayer].metallicRoughness = mix(compositedHit[searchLayer].metallicRoughness, unpackHalf(hit.metallicRoughness), albedo.w);
        compositedHit[searchLayer].emission = mix(compositedHit[searchLayer].emission, unpackHalf(hit.emission), albedo.w);

        // already filled layer
        if (compositedHit[searchLayer].albedo.a > 0.99999f) break;
        hitID = hit.next;
    }


    // apply physical lights
    int lc = -1;
    if (RayDL(ray) > 0 && (RayType(ray) == 1 || RayType(ray) == 2) && !skipping) {
        for (int i=0;i<min(RAY_BLOCK materialUniform.lightcount, 16);i++) {
            float md = 1.0f;
            float dt = intersectSphere(ray.origin.xyz, ray.direct.xyz, lightCenter(i).xyz, lightUniform.lightNode[i].lightColor.w + GAP);
            float t = md * dt;
            if (lessF(dt, INFINITY) && lessEqualF(t, compositedHit[currentLayer].uvt.z)) {
                lc = i;
            }
        }
    }

    // shade light
    if (lc >= 0 && (RayTargetLight(ray) == lc || RayType(ray) != 2)){
        ray.final.xyz = ray.color.xyz * getLightColor(lc);
        ray.color.xyz *= 0.0f;
        RayActived(ray, 0);
        skipping = true;
    }


    // apply background
    {
        vec4 color = vec4(0.0f);
        EnvironmentShader(color, ray);

        if (greaterEqualF(compositedHit[currentLayer].uvt.z, INFINITY) && RayType(ray) != 2 && !skipping) {
            ray.final.xyz = ray.color.xyz * color.xyz;
            ray.color.xyz *= 0.0f;
            RayActived(ray, 0);
            skipping = true;
        }
    }

    // resolve and valiate ray
    ray.direct.xyz = normalize(ray.direct.xyz);
    ray.origin.xyz = ray.origin.xyz + ray.direct.xyz * compositedHit[currentLayer].uvt.z;

    // not shadeable skipping
    if (RayActived(ray) < 1 || ray.hit == -1) {
        skipping = true;
    }

    // get normals
    vec3 surfacenormal = compositedHit[currentLayer].normalHeight.xyz;
    vec3 normal = faceforward(surfacenormal, ray.direct.xyz, surfacenormal);

    // get texture composition data
    float IOR = 1.400f;
    vec4 tx = compositedHit[currentLayer].albedo;
    vec4 emi = compositedHit[currentLayer].emission;
    float refly = compositedHit[currentLayer].metallicRoughness.x; // roughness
    vec3 dielectric = mix(vec3(1.f), vec3(0.05f), clamp(pow(abs(dot(ray.direct.xyz, normal)), IOR - 1.f), 0.0f, 1.0f));
    vec3 sc = mix(dielectric, tx.xyz, sqrt(compositedHit[currentLayer].metallicRoughness.y));

    // we coming to PBR model
    float emis = mlength(emi.xyz);
    float spca = clamp(mlength(sc.xyz), 0.0f, 1.0f);
    float prom = 1.0f - tx.a;
    //float aprom = random() < prom ? 1.f : 0.f;
    float aprom = RayType(ray) == 2 ? prom : (random() < prom ? 1.f : 0.f);
    //float aprom = prom;

    // create rays
    RayRework diffuseRay = ray;
    diffuseRay.final.xyz *= 0.0f;

    RayRework reflectionRay = ray;
    reflectionRay.final.xyz *= 0.0f;

    RayRework emissiveRay = ray;
    emissiveRay.final.xyz *= 0.0f;
    
    if (!skipping) ray.final.xyz *= 0.f;

    if (RayActived(ray) > 0 && !skipping) {
        ray.final.xyz *= 0.0f;

#ifdef USE_SIMPLIFIED_MODEL
        diffuseRay = emissive(emissiveRay, tx.xyz * mix(vec3(0.1f), vec3(1.f), max(dot( normalize(lightCenter(0).xyz - ray.origin.xyz) , normal), 0.0f)), normal);
        reflectionRay = reflection(reflectionRay, clamp(sc.xyz / spca, 0.0f, 1.0f), normal, refly);
#else
        diffuseRay = diffuse(diffuseRay, tx.xyz, normal);
        reflectionRay = reflection(reflectionRay, clamp(sc.xyz / spca, 0.0f, 1.0f), normal, refly);
#endif

        emissiveRay = emissive(emissiveRay, emi.xyz, normal);

        ray = promised(ray, normal);
        ray.color.xyz *= aprom;
        ray.final.xyz *= aprom;
    } else {
        reflectionRay.color.xyz *= 0.0f;
        emissiveRay.color.xyz *= 0.0f;
        diffuseRay.color.xyz *= 0.0f;
        diffuseRay.final.xyz *= 0.0f;
    }

    // emit rays
    if (!overflow && !skipping) {
        diffuseRay.color.xyz *= 1.0f - aprom;
        diffuseRay.final.xyz *= 1.0f - aprom;
        reflectionRay.color.xyz *= 1.0f - aprom;
        emissiveRay.final.xyz *= (1.0f - aprom) * (1.0f - clamp(spca, 0.0f, 1.0f));
    }

    // register reprojection coordinate
    if (RayBasis(ray) == 1 && aprom < 0.1f) {
        Texel txfi = texelBuf.nodes[ray.texel];
        txfi.last3d = vec4(ray.origin.xyz, 1.0f);
        texelBuf.nodes[ray.texel] = txfi;
        RayBasis(ray, 0);
    }

    // reclaim current rays
    if (!overflow) {
        int bounce = RayBounce(ray)-1;
        ray.final.xyz = max(vec3(0.0f), ray.final.xyz);
        ray.color.xyz = max(vec3(0.0f), ray.color.xyz);

        if (bounce < 0 || mlength(ray.color.xyz) < 0.0001f || overflow || ray.hit == -1) {
            RayActived(ray, 0);
        }

        RayBounce(ray, bounce >= 0 ? bounce : 0);
        ray.hit = -1; // reset chains

        if (!overflow) {
            storeRay(t, ray);
            addRayToList(ray); // add current rays to additions with newer
        }
    }

    // emit new rays
    if (!overflow && !skipping)
#ifdef USE_SIMPLIFIED_MODEL
    {
        mixed(diffuseRay.final.xyz, reflectionRay.color.xyz, clamp(spca, 0.0f, 1.0f));
        emitRay(diffuseRay, normal, 1.0f);
        emitRay(reflectionRay, normal, 1.0f);
        emitRay(emissiveRay, normal, clamp(emis, 0.0f, 1.0f));
    }
#else
    {
#ifdef USE_NOISE_LESS_BRDF
        mixed(diffuseRay.color.xyz, reflectionRay.color.xyz, clamp(spca, 0.0f, 1.0f));
#else 
        mixed(diffuseRay.color.xyz, reflectionRay.color.xyz, clamp(float(random() < spca), 0.0f, 1.0f));
#endif
        
        RayRework shadowRay = directLight(0, diffuseRay, vec3(1.0f), normal);
        emitRay(diffuseRay, normal, 1.0f);
        emitRay(reflectionRay, normal, 1.0f);
        emitRay(emissiveRay, normal, clamp(emis, 0.0f, 1.0f));
        applyLight(shadowRay, diffuseRay, surfacenormal); // push shadow
    }
#endif

}
