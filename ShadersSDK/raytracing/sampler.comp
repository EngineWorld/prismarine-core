#version 460 core

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"

#define SAMPLES_LOCK 8

layout ( binding = 0, rgba32f ) uniform image2D presampled;
layout ( binding = 1, r32ui ) uniform uimage2D sampleflags;
LOCAL_SIZE_LAYOUT;







vec4 collectSamples(in uint ts){
    Texel txiho = texelBuf.nodes[ts];
    vec4 sampled = vec4(0.0f);
    int sid = txiho.EXT.y;
    bool invalid = sid < 0 || sid == LONGEST || sid == -1;
    if (anyInvocation(!invalid)) {
        for (int i=0;i<32;i++) {
            invalid = sid < 0 || sid == LONGEST || sid == -1;
            if (allInvocations(invalid)) { // warps votes for break
                break;
            } else 
            if (!invalid) {
                ColorChain ch = chBuf.chains[sid];
                sampled += ch.color;
                sid = ch.cdata.x;
            }
        }
    }
    return sampled;
}

void main(){
    int it = int(gl_GlobalInvocationID.x);
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    ivec2 whs = ivec2(imageSize(presampled).xy);
    vec2 aspect = vec2(wh) / vec2(whs);
    ivec2 scl = ivec2(ceil(aspect));
    ivec3 xyl = ivec3(it % whs.x, it / whs.x, 0);

    int samplecount = 0;
    ivec2 basis = ivec2(vec2(xyl.xy) * aspect);
    vec4 newc = vec4(0.0f);
    vec2 screen = vec2(xyl.xy);
    for(int x=-1;x<scl.x;x++){
        for(int y=-1;y<scl.y;y++){
            ivec2 cmp = basis + ivec2(x, y);
            if (
                cmp.x >= 0 && cmp.x < wh.x && 
                cmp.y >= 0 && cmp.y < wh.y
            ) {
                int ts = cmp.y * wh.x + cmp.x;
                if (texelBuf.nodes[ts].EXT.y < 0 || texelBuf.nodes[ts].EXT.y == LONGEST) continue;
                vec2 surround = vec2(texelBuf.nodes[ts].coord.x, texelBuf.nodes[ts].coord.y) * vec2(whs);
                vec2 diff = surround - screen + 0.00001f;
                if (
                    diff.x >= 0.0f && diff.x < 1.0f &&
                    diff.y >= 0.0f && diff.y < 1.0f
                ) {
                    samplecount++;
                    newc += collectSamples(ts);
                }
            }
            
        }
    }

    newc /= float(samplecount);

    if (samplecount > 0) {
#ifndef MOTION_BLUR
        if (imageLoad(sampleflags, xyl.xy).x > 0) {
            imageStore(sampleflags, xyl.xy, uvec4(0));
            imageStore(presampled, xyl.xy, vec4(0.0f));
        }
#endif

        vec4 xsample = imageLoad(presampled, xyl.xy); // get previous (reprojected) sample
        {
            float next = xsample.w + float(samplecount);
            float prev = xsample.w;
#ifdef MOTION_BLUR
            float divisor = min(prev / next, 1.0f - 1.0f / SAMPLES_LOCK);
#else
            float divisor = min(prev / next, 1.0f);
#endif
            xsample.xyz = fma(xsample.xyz, vec3(divisor), newc.xyz * (1.0f - divisor));
            xsample.w += float(samplecount);
        }
        imageStore(presampled, xyl.xy, vec4(xsample)); // store in current projection
    }
}
