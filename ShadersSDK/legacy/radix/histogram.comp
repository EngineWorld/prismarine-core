#version 460 core
#include "./includes.glsl"

shared uint localHistogram[RADICES];
//layout (local_size_x = WARP_SIZE, local_size_y = WORK_SIZE) in;
layout (local_size_x = BLOCK_SIZE) in;

void main(){
    blocks_info blocks = get_blocks_info(NumKeys, WG_IDX);
    uint localIdx = LT_IDX;
    if (localIdx < RADICES) localHistogram[localIdx] = 0;
    memoryBarrier(); barrier(); 

    UVEC_WARP addr = blocks.offset + localIdx;
    for (int i=0;i<4096;i++) {
        if (i >= blocks.count) break;

        BVEC_WARP validAddress = addr < NumKeys;
        UVEC64_WARP data = UVEC64_WARP(KeyIn[addr]);
        UVEC_WARP k = UVEC_WARP(BFE(data, int(Shift), BITS_PER_PASS));
        UVEC_WARP key = k;

        // smaller version (generalized)
        atomicAdd(localHistogram[key], UVEC_WARP(validAddress));
        addr += BLOCK_SIZE_RT;
    }

    memoryBarrier(); barrier(); 
    if (localIdx < RADICES) Histogram[localIdx * WG_COUNT + WG_IDX] = localHistogram[localIdx];
}
