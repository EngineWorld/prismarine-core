#version 460 core
#include "./includes.glsl"

shared uint local_sort[WG_COUNT];
uint prefix_sum(uint data, inout uint total_sum) {
    local_sort[LT_IDX] = data;
    memoryBarrier(); barrier();
    for (uint i = 1; i < WG_COUNT; i <<= 1) {
        uint tmp = local_sort[LT_IDX - i] * uint(LT_IDX >= i);
        memoryBarrier(); barrier();
        local_sort[LT_IDX] += tmp;
        memoryBarrier(); barrier();
    }
    total_sum = local_sort[WG_COUNT - 1];
    return local_sort[LT_IDX - 1] * uint(LT_IDX > 0);
}

//layout (local_size_x = 1, local_size_y = WG_COUNT) in; // no warp version
//layout (local_size_x = 1024) in;
layout (local_size_x = WG_COUNT) in;

shared uint seed;
void main() {
    if (LT_IDX == WG_COUNT - 1) seed = 0;
    memoryBarrier(); barrier();
    for(uint d=0;d<RADICES;d++){
        uint idx = d * WG_COUNT + LT_IDX;
        uint val = Histogram[idx];
        uint total = 0;
        uint res = prefix_sum(val, total);
        if (LT_IDX < WG_COUNT) Histogram[idx] = res + seed;
        if (LT_IDX == WG_COUNT - 1) seed += res + val;
        memoryBarrier(); barrier();
    }
}