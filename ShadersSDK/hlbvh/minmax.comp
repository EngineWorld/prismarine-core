#version 460 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/vertex.glsl"
#include "../include/mathlib.glsl"

//#define WARP_SIZE 32

layout ( std430, binding = 0 ) restrict buffer MinmaxOutputSSBO {vec4 minmax[];};
layout ( local_size_x = 512 ) in;

shared bbox sdata[ 512 ];

bbox getMinMaxPrimitive(in uint idx){
    uint tri = clamp(idx, 0u, uint(GEOMETRY_BLOCK geometryUniform.triangleCount-1));

    mat3x4 triverts = mat3x4(
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(tri)), 0), 
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(tri)), 1), 
        fetchMosaic(vertex_texture, gatherMosaic(getUniformCoord(tri)), 2)
    );

    triverts[0] = mult4(triverts[0], GEOMETRY_BLOCK geometryUniform.transform);
    triverts[1] = mult4(triverts[1], GEOMETRY_BLOCK geometryUniform.transform);
    triverts[2] = mult4(triverts[2], GEOMETRY_BLOCK geometryUniform.transform);

#ifdef ENABLE_AMD_INSTRUCTION_SET
    return bbox(
        min3(triverts[0], triverts[1], triverts[2]) - 0.0001f, 
        max3(triverts[0], triverts[1], triverts[2]) + 0.0001f
    );
#else 
    return bbox(
        min(min(triverts[0], triverts[1]), triverts[2]) - 0.0001f, 
        max(max(triverts[0], triverts[1]), triverts[2]) + 0.0001f
    );
#endif
}

bbox bboxunion(in bbox b1, in bbox b2) {
    return bbox(
        min(b1.mn, b2.mn),
        max(b1.mx, b2.mx)
    );
}

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint gridSize = (gl_WorkGroupSize.x*2) * gl_NumWorkGroups.x;
    uint tcount = min(GEOMETRY_BLOCK geometryUniform.triangleCount, 16777216);
    uint i = gl_WorkGroupID.x * (gl_WorkGroupSize.x*2) + tid;

    sdata[tid] = bbox(vec4( 100000.f), vec4(-100000.f));
    while (i < tcount) {
        bbox bound = sdata[tid];
        sdata[tid] = bboxunion(bound, bboxunion(getMinMaxPrimitive(i), getMinMaxPrimitive(i + gl_WorkGroupSize.x)));
        i += gridSize;
    };
    memoryBarrier(); barrier(); 

    for (uint ki=(gl_WorkGroupSize.x>>1);ki>=1;ki>>=1) {
        if (tid < ki) {
            bbox bound = sdata[tid];
            bbox opbound = sdata[tid + ki];
            sdata[tid] = bboxunion(bound, opbound); 
        }
        if (ki > gl_SubGroupSizeARB) {
            memoryBarrier(); barrier(); 
        }
    }

    if (tid == 0) {
        minmax[gl_WorkGroupID.x*2 + 0] = sdata[0].mn; 
        minmax[gl_WorkGroupID.x*2 + 1] = sdata[0].mx; 
    }
}
