#version 460 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "./includes.glsl"

layout ( local_size_x = 1024 ) in;

int nlz (in uint64_t x) {
    uvec2 pair = U2P(x);
    int msbNear = findMSB(pair.y);
    int nlzFinal = (msbNear >= 0) ? msbNear : (32 + findMSB(pair.x));
    return 63-nlzFinal;
}

int nlz (in uint x) {
    return 31-findMSB(x);
}

int nlz (in int x) {
    return 31-findMSB(uint(x));
}

int findSplit( int first, int last, uint SIMDThread) {
    MORTONTYPE firstCode = Mortoncodes[first];
    MORTONTYPE lastCode = Mortoncodes[last];

    int split = (first + last) >> 1;
    if (firstCode != lastCode) {
        split = first;
        int commonPrefix = nlz(firstCode ^ lastCode);
        int step = last - first;
        for (int i=0;i<8192;i++) {
            step = (step + 1) >> 1;
            int newSplit = split + step;
            if (newSplit < last) {
                MORTONTYPE splitCode = Mortoncodes[newSplit];
                int splitPrefix = nlz(firstCode ^ splitCode);
                if (splitPrefix > commonPrefix) {
                    split = newSplit;
                }
            }
            if (step <= 1) break; 
        }
    }
    return clamp(split, first, last-1);
}

shared int cCounter;
shared int lCounter;
shared int aCounter;
shared int aRange[2];

initAtomicIncFunction(lCounter, lCounterInc, int);
initAtomicIncFunction(aCounter, aCounterInc, int);
initAtomicIncFunction(cCounter, cCounterInc, int);

void main() {
    uint threadID = uint(gl_LocalInvocationID.x);

    // set leaf indices to initial
    uint workSize = min((Range[0] <= 0) ? 0 : ((Range[0] - 1) / int(gl_WorkGroupSize.x) + 1), 8192);
    for (int i=0;i<workSize;i++) {
        int trID = int(gl_WorkGroupSize.x) * i + int(threadID);
        atomicExchange(LeafIndices[trID], -1);
        atomicExchange(Actives[trID], -1);
    }

    // create initial (root) node
    if (threadID == 0) {
        lCounter = 0, aCounter = 0, cCounter = 0;
        aRange[0] = 0, aRange[1] = 0;

        int hid = lCounterInc(true);
        atomicExchange(Actives[aCounterInc(true)], hid);

        HlbvhNode node = Nodes[hid];
        node.box.mn = (0.0f).xxxx;
        node.box.mx = (0.0f).xxxx;
        node.pdata.xy = ivec2(0, Range[0]-1);
        node.pdata.zw = (-1).xx;
        
        Nodes[hid] = node;
        Flags[hid] = 0;
    }

    // construct BVH by work queues
    for (int h=0;h<256;h++) { // every level of BVH

        // synchronize, and make next work view
        memoryBarrier(); barrier(); 
        if (threadID == 0) {
            aRange[0] = aRange[1];
            aRange[1] = aCounter;
        }

        // synchronize or finalize splitting
        memoryBarrier(); barrier(); 
        if (aRange[1] <= aRange[0]) break; // no work, break

        // begin work on splitting
        uint workSize = min((aRange[1] <= aRange[0]) ? 0 : (((aRange[1] - aRange[0]) - 1) / (int(gl_WorkGroupSize.x) / 2) + 1), 8192);
        for (int i=0;i<workSize;i++) {
            int trID = aRange[0] + ((int(gl_WorkGroupSize.x) / 2) * i + (int(threadID) / 2));
            if (allInvocations(trID >= aRange[1])) break;

            if (trID < aRange[1]) {
                int chID = int(threadID)&1;
                int wsID = (int(gl_LocalInvocationID.x % gl_SubGroupSizeARB) >> 1) << 1;
                int prID = readLane(chID == 0 ? atomicExchange(Actives[trID], -1) : -1, wsID);
                HlbvhNode parentNode = Nodes[prID];

                if (parentNode.pdata.x != parentNode.pdata.y && prID != -1) {
                    // find split
                    int split = readLane(findSplit(parentNode.pdata.x, parentNode.pdata.y, chID), wsID);
                    int hid = lCounterInc(true);

                    // init child node
                    HlbvhNode childNode = Nodes[hid];
                    childNode.box.mn = (0.0f).xxxx;
                    childNode.box.mx = (0.0f).xxxx;
                    childNode.pdata.zw = ivec2(prID, -1);

                    // differentiation between left and right node
                    childNode.pdata.xy = chID == 0 ? ivec2(parentNode.pdata.x, split+0) : ivec2(split+1, parentNode.pdata.y);

                    // is leaf?
                    bool isLeaf = (childNode.pdata.y - childNode.pdata.x) < 1;
                    if (isLeaf) {
                        atomicExchange(LeafIndices[cCounterInc(true)], hid);
                    } else { // add to next works
                        atomicExchange(Actives[aCounterInc(true)], hid);
                    }

                    Flags[hid] = 0;
                    Nodes[hid] = childNode;

                    // if SIMD thread is left, use left lane of parent node, else right lane
                    if (chID == 0) {
                        atomicExchange(Nodes[prID].pdata.x, hid);
                    } else {
                        atomicExchange(Nodes[prID].pdata.y, hid);
                    }
                }
            }
        }
    }

}
