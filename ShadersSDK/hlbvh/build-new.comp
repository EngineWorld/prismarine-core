#version 450 core

// Readme license https://github.com/AwokenGraphics/prismarine-core/blob/master/LICENSE.md

//#define _ORDERED_ACCESS

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "./includes.glsl"

//const int work_size = 1024;
const int work_size = 128;
layout ( local_size_x = work_size ) in;

int nlz(in uint64_t x) {
    uvec2 pair = U2P(x);
    int lv = msb(pair.x);
    int hi = msb(pair.y);
    return 63-((hi >= 0) ? (32 + hi) : lv);
}

int nlz(in uint x) {
    return 31-msb(x);
}

int nlz(in int x) {
    return 31-msb(uint(x));
}

int findSplit( int first, int last) {
    MORTONTYPE firstCode = Mortoncodes[first];
    MORTONTYPE lastCode = Mortoncodes[last];

    int split = (first + last) >> 1;
    if (firstCode != lastCode) {
        split = first;
        int commonPrefix = nlz(firstCode ^ lastCode);
        int step = last - first;
        for (int i=0;i<8192;i++) {
            step = (step + 1) >> 1;
            int newSplit = split + step;
            if (newSplit < last) {
                MORTONTYPE splitCode = Mortoncodes[newSplit];
                int splitPrefix = nlz(firstCode ^ splitCode);
                if (splitPrefix > commonPrefix) {
                    split = newSplit;
                }
            }
            if (step <= 1) break; 
        }
    }
    return clamp(split, first, last-1);
}

layout ( std430, binding = 8 ) restrict buffer BuildCounters {
    int cCounter;
    int lCounter;
    int aCounter;
    int bvhLevel;
    int aRange[2];
};

initAtomicIncByFunction(lCounter, lCounterInc, int)
initAtomicIncFunction(aCounter, aCounterInc, int)
initAtomicIncFunction(cCounter, cCounterInc, int)

void splitNode(in int trID){
    int prID = atomicExchange(Actives[trID], -1);

    HlbvhNode parentNode = Nodes[prID];
    if (parentNode.pdata.x != parentNode.pdata.y && prID != -1) {
        // find split
        int split = findSplit(parentNode.pdata.x, parentNode.pdata.y);
        int hid = lCounterInc(true, 2);

        // init child node
        HlbvhNode childNode = Nodes[hid];
        childNode.box.mn = ( 100000.0f).xxxx;
        childNode.box.mx = (-100000.0f).xxxx;
        childNode.pdata.zw = ivec2(prID, -1);

        // encode with SIMD-like
        ivec4 transplit = ivec4(parentNode.pdata.x, split+0, split+1, parentNode.pdata.y);
        bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1));
        ivec2 hd = hid + ivec2(0, 1);

        // left child
        if (isLeaf.x) {
            atomicExchange(LeafIndices[cCounterInc(true)], hd.x);
        } else { // add to next works
            atomicExchange(Actives[aCounterInc(true)], hd.x);
        }

        // right child
        if (isLeaf.y) {
            atomicExchange(LeafIndices[cCounterInc(true)], hd.y);
        } else { // add to next works
            atomicExchange(Actives[aCounterInc(true)], hd.y);
        }

        childNode.pdata.xy = transplit.xy; // use temporary range
        Flags[hd.x] = 0;
        Nodes[hd.x] = childNode;

        childNode.pdata.xy = transplit.zw; // use temporary range
        Flags[hd.y] = 0;
        Nodes[hd.y] = childNode;

        // link parent with childs
        Nodes[prID].pdata.xy = hd;
    }
}


void main() {
    uint threadID = uint(gl_LocalInvocationID.x);
    int workID = int(gl_WorkGroupID.x);
    int WS = int(gl_WorkGroupSize.x);
    int hWS = int(gl_WorkGroupSize.x) / 2;

    // create initial (root) node
    bool isBeginning = aRange[1] == 0;
    if (gl_GlobalInvocationID.x == 0 && isBeginning) {
        int hid = lCounterInc(true, 1);
        atomicExchange(Actives[aCounterInc(true)], hid);

        HlbvhNode node = Nodes[hid];
        node.box.mn = ( 100000.0f).xxxx;
        node.box.mx = (-100000.0f).xxxx;
        node.pdata = ivec4(0, Range[0]-1, (-1).xx);
        
        Nodes[hid] = node;
        Flags[hid] = 0;
    }

    memoryBarrier(); barrier(); 

    // begin work on splitting
    int ranged[2] = (isBeginning && workID == 0) ? int[2](0, 1) : int[2](aRange[0], aRange[1]);
    uint workSize = min((ranged[1] <= ranged[0]) ? 0 : (((ranged[1] - ranged[0]) - 1) / WS + 1), 8192);
    for (int i=0;i<workSize;i+=int(gl_NumWorkGroups)) {
        int trID = ranged[0] + WS * (i+workID) + int(threadID);
        //if (allInvocations(trID >= ranged[1])) break;
        if (allInvocationsARB(trID >= ranged[1])) break;
        if (trID < ranged[1]) splitNode(trID);
    }

}
